What is OOPS?
	Object Oriented Programming System is the programming technique to write programs based on the real world objects. 
	The states and behaviors of an object are represented as the member variables and methods. 
	In OOPS programming programs are organized around objects and data rather than actions and logic.

What are the advantages of OOPS concepts?
Major advantages of OOPS programming are;
	Simplicity: OOPS programming objects model real world objects, so the complexity is reduced and the program structure is clear.
	Modularity: Each object forms a separate entity whose internal workings are decoupled from other parts of the system.
	Modifiability: It is easy to make minor changes in the data representation or the procedures in an OO program. Changes inside a class do not affect any other part of a program, since the only public interface that the external world has to a class is through the use of methods.
	Extensibility: Adding new features or responding to changing operating environments can be solved by introducing a few new objects and modifying some existing ones.
	Maintainability: Objects can be maintained separately, making locating and fixing problems easier.
	Reusability: Objects can be reused in different programs.
What is the difference between Procedural programming and OOPS?
	Procedural language is based on functions but object oriented language is based on real world objects.
	Procedural language gives importance on the sequence of function execution but object oriented language gives importance on states and behaviors of the objects.
	Procedural language exposes the data to the entire program but object oriented language encapsulates the data.
	Procedural language follows top down programming paradigm but object oriented language follows bottom up programming paradigm.
	Procedural language is complex in nature so it is difficult to modify, extend and maintain but object oriented language is less complex in nature so it is easier to modify, extend and maintain.
	Procedural language provides less scope of code reuse but object oriented language provides more scope of code reuse.
What are the core concepts of OOPS?
	OOPS core concepts are;Abstraction
	Encapsulation
	Polymorphism
	Inheritance
	Composition
	Association
	Aggregation
What is Abstraction?
	Abstraction is an OOPS concept to construct the structure of the real world objects. 
	During this construction only the general states and behaviors are taken and more specific states and behaviors are left aside for the implementers.

What is Encapsulation?
	Encapsulation is an OOPS concept to create and define the permissions and restrictions of an object and its member variables and methods. 
	A very simple example to explain the concept is to make the member variables of a class private and providing public getter and setter methods. 
	Java provides four types of access level modifiers: public, protected, no modifier and private.

What is the difference between Abstraction and Encapsulation?
	“Program to interfaces, not implementations” is the principle for Abstraction and “Encapsulate what varies” is the OO principle for Encapsulation.
	Abstraction provides a general structure of a class and leaves the details for the implementers. Encapsulation is to create and define the permissions and restrictions of an object and its member variables and methods.
	Abstraction is implemented in Java using interface and abstract class while Encapsulation is implemented using four types of access level modifiers: public, protected, no modifier and private.
What is Polymorphism?
	Polymorphism is the occurrence of something in various forms. 
	Java supports various forms of polymorphism like polymorphic reference variables, polymorphic method, polymorphic return types and polymorphic argument types.

What is Inheritance?
	A subclass can inherit the states and behaviors of it’s super class is known as inheritance.

What is multiple inheritance?
	A child class inheriting states and behaviors from multiple parent classes is known as multiple inheritance.

What is the diamond problem in inheritance?
	In case of multiple inheritance, suppose class A has two subclasses B and C, and a class D has two super classes B and C.
	If a method present in A is overridden by both B and C but not by D then from which class D will inherit that method B or C? This problem is known as diamond problem.

Why Java does not support multiple inheritance?
	Java was designed to be a simple language and multiple inheritance introduces complexities like diamond problem. 
	Inheriting states or behaviors from two different type of classes is a case which in reality very rare and it can be achieved easily through an object association.

What is Static Binding and Dynamic Binding?
	Static or early binding is resolved at compile time. Method overloading is an example of static binding.

	Dynamic or late or virtual binding is resolved at run time. Method overriding is an example of dynamic binding.

What is the meaning of “IS-A” and “HAS-A” relationship?
	“IS-A” relationship implies inheritance. 
	A sub class object is said to have “IS-A” relationship with the super class or interface. 
	If class A extends B then A “IS-A” B. 
	It is transitive, that is, if class A extends B and class B extends C then A “IS-A” C. 
	The “instanceof” operator in java determines the “IS-A” relationship.
	When a class A has a member reference variable of type B then A “HAS-A” B. It is also known as Aggregation.

What is Association?
	Association is a relationship between two objects with multiplicity.

What is Aggregation?
	Aggregation is also known as “HAS-A” relationship. 
	When class Car has a member reference variable of type Wheel then the relationship between the classes Car and Wheel is known as Aggregation. 
	Aggregation can be understood as “whole to its parts” relationship.

	Car is the whole and Wheel is part. Wheel can exist without the Car. Aggregation is a weak association.

What is Composition?
	Composition is a special form of Aggregation where the part cannot exist without the whole. 
	Composition is a strong Association. 
	Composition relationship is represented like aggregation with one difference that the diamond shape is filled.

What is Dependency?
	When one class depends on another because it uses that at some point in time then this relationship is known as Dependency. 
	One class depends on another if the independent class is a parameter variable or local variable of a method of the dependent class. 
	A Dependency is drawn as a dotted line from the dependent class to the independent class with an open arrowhead pointing to the independent class.

What is the difference between Association and Dependency?
	The main difference between Association and Dependency is in case of Association one class has an attribute or member 
	variable of the other class type but in case of Dependency a method takes an argument of the other class type or 
	a method has a local variable of the other class type.

What is a Class?
	A class is the specification or template of an object.

What is an Object?
	Object is instance of class.

Difference between object oriented and object based languages
	Object oriented language
		Object-oriented language supports all the features of OOPs.

		Object-oriented language doesn't has in-built object.

		Object-oriented languages are C++, C#, Java etc.

	Object based language
		Object-based language doesn't support all the features of OOPs like Polymorphism and Inheritance

		Object-based language has in-built object like javascript has window object.

		Object-based languages are Javascript, VB etc.

C++
Question 13. What Is Friend Function?
Explain the purpose of the keyword volatile.
What is an inline function?
What are the differences between C and C++?
	1) C++ is a kind of superset of C, most of C programs except few exceptions (See this and this) work in C++ as well.
	2) C is a procedural programming language, but C++ supports both procedural and Object Oriented programming.
	3) Since C++ supports object oriented programming, it supports features like function overloading, templates, inheritance, virtual functions, friend functions. These features are absent in C.
	4) C++ supports exception handling at language level, in C exception handling is done in traditional if-else style.
	5) C++ supports references, C doesn’t.
	6) In C, scanf() and printf() are mainly used input/output. C++ mainly uses streams to perform input and output operations. cin is standard input stream and cout is standard output stream.

	There are many more differences, above is a list of main differences.
What are the differences between references and pointers?
	Both references and pointers can be used to change local variables of one function inside another function. Both of them can also be used to save copying of big objects when passed as arguments to functions or returned from functions, to get efficiency gain.
	Despite above similarities, there are following differences between references and pointers.

	References are less powerful than pointers
	1) Once a reference is created, it cannot be later made to reference another object; it cannot be reseated. This is often done with pointers.
	2) References cannot be NULL. Pointers are often made NULL to indicate that they are not pointing to any valid thing.
	3) A reference must be initialized when declared. There is no such restriction with pointers

	Due to the above limitations, references in C++ cannot be used for implementing data structures like Linked List, Tree, etc. In Java, references don’t have above restrictions, and can be used to implement all data structures. References being more powerful in Java, is the main reason Java doesn’t need pointers.

	References are safer and easier to use:
	1) Safer: Since references must be initialized, wild references like wild pointers are unlikely to exist. It is still possible to have references that don’t refer to a valid location (See questions 5 and 6 in the below exercise )
	2) Easier to use: References don’t need dereferencing operator to access the value. They can be used like normal variables. ‘&’ operator is needed only at the time of declaration. Also, members of an object reference can be accessed with dot operator (‘.’), unlike pointers where arrow operator (->) is needed to access members.

What are virtual functions – Write an example? 
	Virtual functions are used with inheritance, they are called according to the type of object pointed or referred, not according to the type of pointer or reference. In other words, virtual functions are resolved late, at runtime. Virtual keyword is used to make a function virtual.

	Following things are necessary to write a C++ program with runtime polymorphism (use of virtual functions)
	1) A base class and a derived class.
	2) A function with same name in base class and derived class.
	3) A pointer or reference of base class type pointing or referring to an object of derived class.

	For example, in the following program bp is a pointer of type Base, but a call to bp->show() calls show() function of Derived class, because bp points to an object of Derived class.
	#include<iostream> 
	using namespace std; 
	  
	class Base { 
	public: 
	    virtual void show() { cout<<" In Base \n"; } 
	}; 
	  
	class Derived: public Base { 
	public: 
	    void show() { cout<<"In Derived \n"; }  
	}; 
	  
	int main(void) {    
	    Base *bp = new Derived;      
	    bp->show();  // RUN-TIME POLYMORPHISM 
	    return 0; 
	}
	What is this pointer?
	The ‘this’ pointer is passed as a hidden argument to all nonstatic member function calls and is available as a local variable 
	within the body of all nonstatic functions. 
	‘this’ pointer is a constant pointer that holds the memory address of the current object. 
	‘this’ pointersinter is not available in static member functions as static member functions can be called 
	without any object (with class name).

	What are VTABLE and VPTR?
	vtable is a table of function pointers. It is maintained per class.
	vptr is a pointer to vtable. It is maintained per object (See this for an example).
	Compiler adds additional code at two places to maintain and use vtable and vptr.
	1) Code in every constructor. This code sets vptr of the object being created. This code sets vptr to point to vtable of the class.
	2) Code with polymorphic function call (e.g. bp->show() in above code).
	 Wherever a polymorphic call is made, compiler inserts code to first look for vptr using base class pointer or reference (In the above example, since pointed or referred object is of derived type, vptr of derived class is accessed). 
	 Once vptr is fetched, vtable of derived class can be accessed. Using vtable, address of derived derived class function show() is accessed and called.