15. Advanced Concepts in C++

1. Object Design and Templets
2. STL (Standard Type Libraries)
3. RTTI (Run Time Type Identification)
4. Advanced Typecasting
5. New data types
6. New operators
7. class implimentation
8. namespace scopt
9. operator keywords
10. new headers
11. C++ containers

-----------------------------------------------------------------------------------------------------------------------------
1. Object Design and Templets
-----------------------------------------------------------------------------------------------------------------------------
Template is simple and yet very powerful tool in C++. The simple idea is to pass data type as a parameter so that we don’t need to write same code for different data types. For example a software company may need sort() for different data types. Rather than writing and maintaining the multiple codes, we can write one sort() and pass data type as a parameter.

C++ adds two new keywords to support templates: ‘template’ and ‘typename’. The second keyword can always be replaced by keyword ‘class’.

How templates work?
Templates are expanded at compiler time. This is like macros. The difference is, compiler does type checking before template expansion. The idea is simple, source code contains only function/class, but compiled code may contain multiple copies of same function/class.

Function Templates We write a generic function that can be used for different data types. Examples of function templates are sort(), max(), min(), printArray()

#include <iostream> 
using namespace std; 
  
// One function works for all data types.  This would work 
// even for user defined types if operator '>' is overloaded 
template <typename T> 
T myMax(T x, T y) 
{ 
   return (x > y)? x: y; 
} 
  
int main() 
{ 
  cout << myMax<int>(3, 7) << endl;  // Call myMax for int 
  cout << myMax<double>(3.0, 7.0) << endl; // call myMax for double 
  cout << myMax<char>('g', 'e') << endl;   // call myMax for char 
  
  return 0; 
}

Class Templates Like function templates, class templates are useful when a class defines something that is independent of data type. Can be useful for classes like LinkedList, BinaryTre, Stack, Queue, Array, etc.

Can there be more than one arguments to templates?
Yes, like normal parameters, we can pass more than one data types as arguments to templates. The following example demonstrates the same.

Can we specify default value for template arguments?
Yes, like normal parameters, we can specify default arguments to templates. The following example demonstrates the same.

What is the difference between function overloading and templates?
Both function overloading and templates are examples of polymorphism feature of OOP. Function overloading is used when multiple functions do similar operations, templates are used when multiple functions do identical operations.

-----------------------------------------------------------------------------------------------------------------------------
2. STL (Standard Type Libraries)
-----------------------------------------------------------------------------------------------------------------------------
