8. Constructor and Destructor
1. Constructor
2. Parameterised Constructor
3. Multiple constructor in class (constructor overloading)
4. Dynamic initialization of objects
5. Copy Constructor
6. Encapsulating into an object
7. Destructors
8. Associations
9. Inner Class

-----------------------------------------------------------------------------------------------------------------------------
1. Constructor 2. Parameterised Constructor 3. Multiple constructor in class (constructor overloading) 4. Dynamic 

initalization of objects
-----------------------------------------------------------------------------------------------------------------------------
#include <iostream>

using namespace std;

class Interval
{
public:
	//default constructor - a constructor which can be called with zero argument. (trival constructor)
	Interval()
	{
		seconds = 0; //initialization
	}
	
	//conversion constructor - a constructor which can be called with a single argument.
	Interval(long time)
	{
		seconds = time;
	}
	
	//parameterized constructor - a constructor which can be called with multiple arguments.
	Interval(long s, long m)
	{
		seconds = 60 * m + s;
	}

	void SetTime(long value) 
	{
		seconds = value; 
	}

	long GetTime() 
	{
		return seconds;
	}

	void Print()
	{
		if((seconds % 60) < 10)
			cout << (seconds / 60) << ":0" << (seconds % 60) << endl;
		else
			cout << (seconds / 60) << ":" << (seconds % 60) << endl;
	}
private:
	long seconds;
};


int main(void)
{
	Interval jack; //activating instance of Interval using default constructor 
	jack.SetTime(125); //dynamic allocation
	cout << "Jack's Interval = ";
	jack.Print();

	Interval john = 200; //activating instance of Interval using conversion constructor 
	cout << "John's Interval = ";
	john.Print();

	Interval jeff(70, 3); //activating instance of Interval using parameterized constructor
	cout << "Jeff's Interval = ";
	jeff.Print();
}

-----------------------------------------------------------------------------------------------------------------------------
5. Copy constructor
-----------------------------------------------------------------------------------------------------------------------------
What is a copy constructor? 
A copy constructor is a member function which initializes an object using another object of the same class. A copy constructor has the following general function prototype:

    ClassName (const ClassName &old_obj); 
Following is a simple example of copy constructor.

filter_none
edit
play_arrow

brightness_4
#include<iostream> 
using namespace std; 
  
class Point 
{ 
private: 
    int x, y; 
public: 
    Point(int x1, int y1) { x = x1; y = y1; } 
  
    // Copy constructor 
    Point(const Point &p2) {x = p2.x; y = p2.y; } 
  
    int getX()            {  return x; } 
    int getY()            {  return y; } 
}; 
  
int main() 
{ 
    Point p1(10, 15); // Normal constructor is called here 
    Point p2 = p1; // Copy constructor is called here 
  
    // Let us access values assigned by constructors 
    cout << "p1.x = " << p1.getX() << ", p1.y = " << p1.getY(); 
    cout << "\np2.x = " << p2.getX() << ", p2.y = " << p2.getY(); 
  
    return 0; 
}
Output:

p1.x = 10, p1.y = 15
p2.x = 10, p2.y = 15 

----------------------------------------------------------------------------------------------------------------------------
6. Encapsulating into an object
----------------------------------------------------------------------------------------------------------------------------
Encapsulation in C++
In normal terms Encapsulation is defined as wrapping up of data and information under a single unit. In Object Oriented Programming, Encapsulation is defined as binding together the data and the functions that manipulates them.
Consider a real life example of encapsulation, in a company there are different sections like the accounts section, finance section, sales section etc. The finance section handles all the financial transactions and keep records of all the data related to finance. Similarly the sales section handles all the sales related activities and keep records of all the sales. Now there may arise a situation when for some reason an official from finance section needs all the data about sales in a particular month. In this case, he is not allowed to directly access the data of sales section. He will first have to contact some other officer in the sales section and then request him to give the particular data. This is what encapsulation is. Here the data of sales section and the employees that can manipulate them are wrapped under a single name “sales section”.

#include<iostream> 
using namespace std; 
  
class Encapsulation 
{ 
    private: 
        // data hidden from outside world 
        int x; 
          
    public: 
        // function to set value of  
        // variable x 
        void set(int a) 
        { 
            x =a; 
        } 
          
        // function to return value of 
        // variable x 
        int get() 
        { 
            return x; 
        } 
}; 
  
// main function 
int main() 
{ 
    Encapsulation obj; 
      
    obj.set(5); 
      
    cout<<obj.get(); 
    return 0; 
} 
output:

5
In the above program the variable x is made private. This variable can be accessed and manipulated only using the functions get() and set() which are present inside the class. Thus we can say that here, the variable x and the functions get() and set() are binded together which is nothing but encapsulation.

Role of access specifiers in encapsulation

As we have seen in above example, access specifiers plays an important role in implementing encapsulation in C++. The process of implementing encapsulation can be sub-divided into two steps:

The data members should be labeled as private using the private access specifiers
The member function which manipulates the data members should be labeled as public using the public access specifier

----------------------------------------------------------------------------------------------------------------------------7. Destructors
----------------------------------------------------------------------------------------------------------------------------
What is destructor?
Destructor is a member function which destructs or deletes an object.

When is destructor called?
A destructor function is called automatically when the object goes out of scope:
(1) the function ends
(2) the program ends
(3) a block containing local variables ends
(4) a delete operator is called 
How destructors are different from a normal member function?
Destructors have same name as the class preceded by a tilde (~)
Destructors don’t take any argument and don’t return anything

class String 
{ 
private: 
    char *s; 
    int size; 
public: 
    String(char *); // constructor 
    ~String();      // destructor 
}; 
  
String::String(char *c) 
{ 
    size = strlen(c); 
    s = new char[size+1]; 
    strcpy(s,c); 
} 
  
String::~String() 
{ 
    delete []s; 
} 
Can there be more than one destructor in a class?
No, there can only one destructor in a class with classname preceded by ~, no parameters and no return type.

When do we need to write a user-defined destructor?
If we do not write our own destructor in class, compiler creates a default destructor for us. The default destructor works fine unless we have dynamically allocated memory or pointer in class. When a class contains a pointer to memory allocated in class, we should write a destructor to release memory before the class instance is destroyed. This must be done to avoid memory leak
---------------------------------------------------------------------------------------------------------------------------
8. Associations

COMMON RELATIONSHIP
1.Containment (Association) - An object of one class can hold an object of another class within one of its fields. This object based has a 
		relationship is called containment and it is of folling two types-
		i.Composition - It is a type of containment in which the outer objects controls the lifetime of inner object.

			<<outer>>			<<inner>>
			  
				   .
				  ...
			   Hotel ..... .................    Room              
				  ...  <<has a>>
				   .   

		ii. Aggregation - It is a type of containment in which  lifetime of inner object is independent of outer object.
		
			<<outer>>			<<inner>>
			  
				   .
				  . .
			   Room  .   . .................    Guest              
				  . .  <<has a>>
				   . 
----------------------------------------------------------------------------------------------------------------------------9. Inner Class
----------------------------------------------------------------------------------------------------------------------------
Nested classes are cool for hiding implementation details.

List:

class List
{
    public:
        List(): head(nullptr), tail(nullptr) {}
    private:
        class Node
        {
              public:
                  int   data;
                  Node* next;
                  Node* prev;
        };
    private:
        Node*     head;
        Node*     tail;
};
Here I don't want to expose Node as other people may decide to use the class and that would hinder me from updating my class as anything exposed is part of the public API and must be maintained forever. By making the class private, I not only hide the implementation I am also saying this is mine and I may change it at any time so you can not use it.

Look at std::list or std::map they all contain hidden classes (or do they?). The point is they may or may not, but because the implementation is private and hidden the builders of the STL were able to update the code without affecting how you used the code, or leaving a lot of old baggage laying around the STL because they need to maintain backwards compatibility with some fool who decided they wanted to use the Node class that was hidden inside list.
