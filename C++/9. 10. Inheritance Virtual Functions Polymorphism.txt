9. 10. Inheritance, Virtual Functions, Polymorphism

1. Inheritance
	At Bottom
		i.  Virtual Base Class
		ii. Interface
		iii.Abstract Class
		iv. Constructor in derived class
2. Types of Inheritance
3. Polymorphism
4. Run Time Polymorphism
5. Overloading Functions
6. Overloading Operators
7. Friend Functions
8. Virtual Functions and Pure virtual functions(Abstract base class) 

----------------------------------------------------------------------------------------------------------------------------
1. Inhritance
----------------------------------------------------------------------------------------------------------------------------
The capability of a class to derive properties and characteristics from another class is called Inheritance. Inheritance is one of the most important feature of Object Oriented Programming.
	* Sub Class: The class that inherits properties from another class is called Sub class or Derived Class.
	* Super Class:The class whose properties are inherited by sub class is called Base Class or Super class.
Why and when to use inheritance?

Consider a group of vehicles. You need to create classes for Bus, Car and Truck. The methods fuelAmount(), capacity(), applyBrakes() will be same for all of the three classes. If we create these classes avoiding inheritance then we have to write all of these functions in each of the three classes.
You can clearly see that above process results in duplication of same code 3 times. This increases the chances of error and data redundancy. To avoid this type of situation, inheritance is used. If we create a class Vehicle and write these three functions in it and inherit the rest of the classes from the vehicle class, then we can simply avoid the duplication of data and increase re-usability. Look at the below diagram in which the three classes are inherited from vehicle class:

Note: A derived class doesn’t inherit access to private data members. However, it does inherit a full parent object, which contains any private members which that class declares.

Modes of Inheritance

Public mode: If we derive a sub class from a public base class. Then the public member of the base class will become public in the derived class and protected members of the base class will become protected in derived class.
Protected mode: If we derive a sub class from a Protected base class. Then both public member and protected members of the base class will become protected in derived class.
Private mode: If we derive a sub class from a Private base class. Then both public member and protected members of the base class will become Private in derived class.
Note : The private members in the base class cannot be directly accessed in the derived class, while protected members can be directly accessed. 
----------------------------------------------------------------------------------------------------------------------------
2. Types of Inheritance
----------------------------------------------------------------------------------------------------------------------------
Types of Inheritance in C++

1. Single Inheritance: In single inheritance, a class is allowed to inherit from only one class. i.e. one sub class is inherited by one base class only.

2. Multiple Inheritance: Multiple Inheritance is a feature of C++ where a class can inherit from more than one classes. i.e one sub class is inherited from more than one base classes.

3. Multilevel Inheritance: In this type of inheritance, a derived class is created from another derived class.

4. Hierarchical Inheritance: In this type of inheritance, more than one sub class is inherited from a single base class. i.e. more than one derived class is created from a single base class.

5. Hybrid (Virtual) Inheritance: Hybrid Inheritance is implemented by combining more than one type of inheritance. For example: Combining Hierarchical inheritance and Multiple Inheritance.
Below image shows the combination of hierarchical and multiple inheritance:

----------------------------------------------------------------------------------------------------------------------------
3. Polymorphism 4. Runtime Polymorphism 5. Overloading Function 6. Overloading Operators 
----------------------------------------------------------------------------------------------------------------------------

The word polymorphism means having many forms. In simple words, we can define polymorphism as the ability of a message to be displayed in more than one form.
Real life example of polymorphism, a person at a same time can have different characteristic. Like a man at a same time is a father, a husband, a employee. So a same person posses have different behavior in different situations. This is called polymorphism.
Polymorphism is considered as one of the important features of Object Oriented Programming.
In C++ polymorphism is mainly divided into two types:

1. Compile time Polymorphism
2. Runtime Polymorphism
1. Compile time polymorphism: This type of polymorphism is achieved by function overloading or operator overloading. 

i. Function Overloading: When there are multiple functions with same name but different parameters then these functions are said to be overloaded. Functions can be overloaded by change in number of arguments or/and change in type of arguments.
class Geeks 
{ 
    public: 
      
    // function with 1 int parameter 
    void func(int x) 
    { 
        cout << "value of x is " << x << endl; 
    } 
      
    // function with same name but 1 double parameter 
    void func(double x) 
    { 
        cout << "value of x is " << x << endl; 
    } 
      
    // function with same name and 2 int parameters 
    void func(int x, int y) 
    { 
        cout << "value of x and y is " << x << ", " << y << endl; 
    } 
}; 
ii. Operator Overloading: C++ also provide option to overload operators. For example, we can make the operator (‘+’) for string class to concatenate two strings. We know that this is the addition operator whose task is to add to operands. So a single operator ‘+’ when placed between integer operands , adds them and when placed between string operands, concatenates them.

#include <iostream>

using namespace std;

class Interval
{
public:
	Interval(long m, long s)
	{
		seconds = 60 * m + s;
	}

	Interval(long t=0)
	{
		seconds = t;
	}

	long GetTime() const 
	{
		return seconds; 
	}

	void Print() const
	{
		if((seconds % 60) < 10)
			cout << (seconds / 60) << ":0" << (seconds % 60) << endl;
		else
			cout << (seconds / 60) << ":" << (seconds % 60) << endl;
	}

	Interval operator+(const Interval& rhs) const
	{
		return Interval(seconds + rhs.seconds);
	}

	Interval operator++()
	{
		return Interval(++seconds);
	}

	Interval operator++(int)
	{
		return Interval(seconds++);
	}

private:
	long seconds;

//a non-member function defined by the author of a class
//which can access private members of that class
friend Interval operator*(long, const Interval&);
};

Interval operator*(long lhs, const Interval& rhs)
{
	return Interval(lhs * rhs.seconds);
}

int main(void)
{
	Interval a(5, 45);
	a.Print();

	Interval b(210);
	b.Print();

	Interval c = a + b; //a.operator+(b)
	c.Print();

	Interval d = 3 * c; //operator*(3, c)
	d.Print();

	Interval e = ++d; //d.operator++()
	d.Print();
	e.Print();

	Interval f = e++; //e.operator++(0)
	e.Print();
	f.Print();
}

#include <iostream>

using namespace std;

class Interval
{
public:
	Interval(long m, long s)
	{
		seconds = 60 * m + s;
	}

	Interval(long t=0)
	{
		seconds = t;
	}

	long GetTime() const 
	{
		return seconds; 
	}

	void Print() const
	{
		if((seconds % 60) < 10)
			cout << (seconds / 60) << ":0" << (seconds % 60) << endl;
		else
			cout << (seconds / 60) << ":" << (seconds % 60) << endl;
	}

	long operator[](int index) const
	{
		return index ? (seconds / 60) : (seconds % 60);
	}

	operator float() const 
	{
		return seconds / 60.0;
	}

private:
	long seconds;

};


int main(void)
{
	Interval a(5, 45);
	a.Print();
	cout << "Above Interval has " << a[1] << " minutes and " << a[0] << " seconds." << endl;

	float b = a; //a.float()
	cout << b << endl;
}

2. Runtime polymorphism: This type of polymorphism is achieved by Function Overriding.
Function overriding on the other hand occurs when a derived class has a definition for one of the member functions of the base class. That base function is said to be overridden.
#include <bits/stdc++.h> 
using namespace std; 
  
class base 
{ 
public: 
    virtual void print () 
    { cout<< "print base class" <<endl; } 
   
    void show () 
    { cout<< "show base class" <<endl; } 
}; 
   
class derived:public base 
{ 
public: 
    void print () //print () is already virtual function in derived class, we could also declared as virtual void print () explicitly 
    { cout<< "print derived class" <<endl; } 
   
    void show () 
    { cout<< "show derived class" <<endl; } 
}; 
  
//main function 
int main()  
{ 
    base *bptr; 
    derived d; 
    bptr = &d; 
       
    //virtual function, binded at runtime (Runtime polymorphism) 
    bptr->print();  
       
    // Non-virtual function, binded at compile time 
    bptr->show();  
  
    return 0; 
}  
----------------------------------------------------------------------------------------------------------------------------
8. Virtual Functions
----------------------------------------------------------------------------------------------------------------------------
The main thing to note about the program is, derived class function is called using a base class pointer. The idea is, virtual functions are called according to the type of object pointed or referred, not according to the type of pointer or reference. In other words, virtual functions are resolved late, at runtime.

#include<iostream> 
using namespace std; 
   
class Base 
{ 
public: 
    virtual void show() { cout<<" In Base \n"; } 
}; 
   
class Derived: public Base 
{ 
public: 
    void show() { cout<<"In Derived \n"; } 
}; 
   
int main(void) 
{ 
    Base *bp = new Derived; 
    bp->show();  // RUN-TIME POLYMORPHISM 
    return 0; 
} 

What is the use?
Virtual functions allow us to create a list of base class pointers and call methods of any of the derived classes without even knowing kind of derived class object. For example, consider a employee management software for an organization, let the code has a simple base class Employee , the class contains virtual functions like raiseSalary(), transfer(), promote(),.. etc. Different types of employees like Manager, Engineer, ..etc may have their own implementations of the virtual functions present in base class Employee. In our complete software, we just need to pass a list of employees everywhere and call appropriate functions without even knowing the type of employee. For example, we can easily raise salary of all employees by iterating through list of employees. Every type of employee may have its own logic in its class, we don’t need to worry because if raiseSalary() is present for a specific employee type, only that function would be called.
class Employee 
{ 
public: 
    virtual void raiseSalary() 
    {  /* common raise salary code */  } 
  
    virtual void promote() 
    { /* common promote code */ } 
}; 
  
class Manager: public Employee { 
    virtual void raiseSalary() 
    {  /* Manager specific raise salary code, may contain 
          increment of manager specific incentives*/  } 
  
    virtual void promote() 
    { /* Manager specific promote */ } 
}; 
  
// Similarly, there may be other types of employees 
  
// We need a very simple function to increment salary of all employees 
// Note that emp[] is an array of pointers and actual pointed objects can 
// be any type of employees. This function should ideally be in a class  
// like Organization, we have made it global to keep things simple 
void globalRaiseSalary(Employee *emp[], int n) 
{ 
    for (int i = 0; i < n; i++) 
        emp[i]->raiseSalary(); // Polymorphic Call: Calls raiseSalary()  
                               // according to the actual object, not  
                               // according to the type of pointer                                  
} 

How does compiler do this magic of late resolution?
Compiler maintains two things to this magic :
	
	Array 			Actual Object 			VTable
	---------		---------------			---------------- 
	 emp(0)	----	Manager Object -------->&managerSalary()		
	 			|->		vptr		   ---->&manager:Pramotes()
	---------		---------------	   |	----------------
	 emp(1)	------->Engineer Object----|--->&managerSalary()
	 					vptr		   |	&manager:Pramotes()
	---------		---------------	   |	----------------
	 emp(2)	------->Manager Object-----             |
	 					vptr                        |
	---------		---------------			        |
	 	|				  |							|
	 	|				  |							|
	 	| 				  |							|

vtable: A table of function pointers. It is maintained per class.
vptr: A pointer to vtable. It is maintained per object (See this for an example).

Compiler adds additional code at two places to maintain and use vptr.
1) Code in every constructor. This code sets vptr of the object being created. This code sets vptr to point to vtable of the class.
2) Code with polymorphic function call (e.g. bp->show() in above code). Wherever a polymorphic call is made, compiler inserts code to first look for vptr using base class pointer or reference (In the above example, since pointed or referred object is of derived type, vptr of derived class is accessed). Once vptr is fetched, vtable of derived class can be accessed. Using vtable, address of derived derived class function show() is accessed and called.

----------------------------------------------------------------------------------------------------------------------------
9. Pure Virtual Functions and Abstract Base Class
----------------------------------------------------------------------------------------------------------------------------
Sometimes implementation of all function cannot be provided in a base class because we don’t know the implementation. Such a class is called abstract class. For example, let Shape be a base class. We cannot provide implementation of function draw() in Shape, but we know every derived class must have implementation of draw(). Similarly an Animal class doesn’t have implementation of move() (assuming that all animals move), but all animals must know how to move. We cannot create objects of abstract classes.

A pure virtual function (or abstract function) in C++ is a virtual function for which we don’t have implementation, we only declare it. 

		* A pure virtual function is declared by assigning 0 in declaration. 
		* A pure virtual function is implemented by classes which are derived from a Abstract class.
		* A class is abstract if it has at least one pure virtual function.
		* We can have pointers and references of abstract class type.
		* If we do not override the pure virtual function in derived class, then derived class also becomes abstract class.
		* An abstract class can have constructors.
#include<iostream> 
using namespace std; 
  
// An abstract class with constructor 
class Base 
{ 
protected: 
   int x; 
public: 
  virtual void fun() = 0; 
  Base(int i) { x = i; } 
}; 
  
class Derived: public Base 
{ 
    int y; 
public: 
    Derived(int i, int j):Base(i) { y = j; } 
    void fun() { cout << "x = " << x << ", y = " << y; } 
}; 
  
int main(void) 
{ 
    Derived d(4, 5); 
    d.fun(); 
    return 0; 
} 

--------------------------------------------------------------------------------------------------------------------------
	i.  Virtual Base Class
	ii. Interface
	iii.Abstract Class (Pure virtual functions)
	iv. Constructor in derived class

--------------------------------------------------------------------------------------------------------------------------
i. Virtual Base Class
--------------------------------------------------------------------------------------------------------------------------
Virtual base classes, used in virtual inheritance, is a way of preventing multiple "instances" of a given class appearing in an inheritance hierarchy when using multiple inheritance.

Consider the following scenario:

class A { public: void Foo() {} };
class B : public A {};
class C : public A {};
class D : public B, public C {};
The above class hierarchy results in the "dreaded diamond" which looks like this:

  A
 / \
B   C
 \ /
  D
An instance of D will be made up of B, which includes A, and C which also includes A. So you have two "instances" (for want of a better expression) of A.

When you have this scenario, you have the possibility of ambiguity. What happens when you do this:

D d;
d.Foo(); // is this B's Foo() or C's Foo() ??
Virtual inheritance is there to solve this problem. When you specify virtual when inheriting your classes, you're telling the compiler that you only want a single instance.

class A { public: void Foo() {} };
class B : public virtual A {};
class C : public virtual A {};
class D : public B, public C {};
This means that there is only one "instance" of A included in the hierarchy. Hence

D d;
d.Foo(); // no longer ambiguous

--------------------------------------------------------------------------------------------------------------------------
ii. Interface (Abstract Classes) (abstract base class create by assigning pure virtual function in class)
--------------------------------------------------------------------------------------------------------------------------
The C++ interfaces are implemented using abstract classes and these abstract classes should not be confused with data abstraction which is a concept of keeping implementation details separate from associated data.

A class is made abstract by declaring at least one of its functions as pure virtual function. A pure virtual function is specified by placing "= 0" in its declaration as follows −
class Box {
   public:
      // pure virtual function
      virtual double getVolume() = 0;
      
   private:
      double length;      // Length of a box
      double breadth;     // Breadth of a box
      double height;      // Height of a box
};
The purpose of an abstract class (often referred to as an ABC) is to provide an appropriate base class from which other classes can inherit. Abstract classes cannot be used to instantiate objects and serves only as an interface. Attempting to instantiate an object of an abstract class causes a compilation error.

Thus, if a subclass of an ABC needs to be instantiated, it has to implement each of the virtual functions, which means that it supports the interface declared by the ABC. Failure to override a pure virtual function in a derived class, then attempting to instantiate objects of that class, is a compilation error.

Classes that can be used to instantiate objects are called concrete classes.

#include <iostream>
 
using namespace std;
 
// Base class
class Shape {
   public:
      // pure virtual function providing interface framework.
      virtual int getArea() = 0;
      void setWidth(int w) {
         width = w;
      }
   
      void setHeight(int h) {
         height = h;
      }
   
   protected:
      int width;
      int height;
};
 
// Derived classes
class Rectangle: public Shape {
   public:
      int getArea() { 
         return (width * height); 
      }
};

class Triangle: public Shape {
   public:
      int getArea() { 
         return (width * height)/2; 
      }
};
 
int main(void) {
   Rectangle Rect;
   Triangle  Tri;
 
   Rect.setWidth(5);
   Rect.setHeight(7);
   
   // Print the area of the object.
   cout << "Total Rectangle area: " << Rect.getArea() << endl;

   Tri.setWidth(5);
   Tri.setHeight(7);
   
   // Print the area of the object.
   cout << "Total Triangle area: " << Tri.getArea() << endl; 

   return 0;
}

---------------------------------------------------------------------------------------------------------------------------
iv. Constructor in Derived Class
---------------------------------------------------------------------------------------------------------------------------
When a class is declared, a constructor is also declared inside the class in order to initialize data members. It is not possible to use a single constructor for more classes. Every class has its own constructor and destructor with a similar name as the class. When a class is derived from another class, it is possible to define a constructor in the derived class, and the data members of both base and derive classes can be initialized. It is not essential to declare a constructor in a base class. Thus, the constructor of the derived class works for its base class; such constructors are called 

class A{
	protected:
	int x;
	int y;
};

class B: private A{
	public:
	int z;
	B(){x = 1; y = 2; z = 3;}
};
int main()
{
	B b;
	return 0;
}