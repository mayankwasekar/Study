1. Introduction to JavaScript
	1.1. Introduction to JavaScript
	1.2. Advantage of using Java Script on client side over VB Script
	1.3. Variables in Java Script
	1.4. Statements
	1.5. Operators
	1.6. Comments
	1.7. Constructs
	1.8. Functions
	1.9. Expressions
	1.10.JavaScript Console
	1.11.Scope
	1.12.Events
	1.13.Strings, Sting Methods
	1.14.Numbers, Number Methods
	1.15.Dates, Date Formats, Date Methods
	1.16.Arrays, Array Methods

	2.1. Booleans
	2.2. Comparisons
	2.3. Control Structures
	2.4. Conditions
	2.5. Switch
	2.6. Loop For
	2.7. Loop While
	2.8. Break
	2.9. Functions,Function Definitions,Function Parameters,Function Invocation, Function Closures

	3.1. Objects,Object Definitions,Object Properties,Object Methods,Object Prototypes
	3.2. Object Oriented Programing
		3.2.1.  Method
		3.2.2.  Constructor
		3.2.3.  Inheritance
		3.2.4.  Encapsulation
		3.2.5.  Abstraction
		3.2.6.  Polymorphism

	4.1. JavaScript Validations
	4.2. Document Object Model, Document and Events(DOM Manipulation)
	4.3. HTML DOM
	4.4. DOM Intro
	4.5. DOM Methods
	4.6. DOM Document
	4.7. DOM Elements
	4.8. DOM HTML
	4.9. DOM CSS
	4.10.DOM Animations
	4.11.DOM Events
	4.12.DOM EventListener
	4.13.DOM Navigation
	4.14.DOM Nodes
	4.15.DOM Nodelist
	4.16.Object hierarchy in Java Script

	5.1. Debugging
	5.2. Type Conversion, Regular Expression
	5.3. Errors, Debugging
	5.4. Forms
		5.4.1. Forms Validation
		5.4.2. Forms API
	
	6.1. JS Browser BOM, Window, Screen, Location, History, Navigator, Popup alert, Timing, Cookies
	6.2. JavaScript Windows
	6.3. Pushing code quality via JSLint Tool
	6.4. Security in Java Script

	1.1. Introduction to JavaScript
		JavaScript is what is called a Client-side Scripting Language. 
		JavaScript can update and change both HTML and CSS
		JavaScript can calculate, manipulate and validate data
		script is interpreted

	1.2. Advantage of using Java Script on client side over VB Script

	1.3. Variables in Java Script
			Numbers
			Strings
			Objects	- Objects are variables too. But objects can contain many values.
					  var car = {type:"Fiat", model:"500", color:"white"};
			Arrays	- JavaScript arrays are used to store multiple values in a single variable.
					  var cars = ["Saab", "Volvo", "BMW"];
			Functions	- function myFunction(p1, p2) {
						    return p1 * p2;              // The function returns the product of p1 and p2
						}
	1.4. Statements
			var x, y, z;    // Statement 1
			x = 5;          // Statement 2
			y = 6;          // Statement 3
			z = x + y;      // Statement 4
	1.5. Operators
			var a = 5, b = 10, c = "5";
			var x = a;
			a == c; // returns true
			a === c; // returns false
			a == x; // returns true
	1.6. Comments
	1.7. Constructs
			<p id="demo"></p>

			<script>
			// Constructor function for Person objects
			function Person(first, last, age, eye) {
			  this.firstName = first;
			  this.lastName = last;
			  this.age = age;
			  this.eyeColor = eye;
			}

			// Create a Person object
			var myFather = new Person("John", "Doe", 50, "blue");

			// Display age
			document.getElementById("demo").innerHTML =
			"My father is " + myFather.age + "."; 

	1.8. Functions
	1.9. Expressions
			The expression x = 7 is an example of the first type. 
	1.10.JavaScript Console
			JavaScript can "display" data in different ways:

			Writing into an HTML element, using innerHTML.
			Writing into the HTML output using document.write().
			Writing into an alert box, using window.alert().
			Writing into the browser console, using console.log().
	1.11.Scope
			In JavaScript there are two types of scope:

			Local scope
			Global scope
	1.12.Events
			Common HTML Events
			Here is a list of some common HTML events:
			Event			Description
			onchange		An HTML element has been changed
			onclick	The 	user clicks an HTML element
			onmouseover		The user moves the mouse over an HTML element
			onmouseout		The user moves the mouse away from an HTML element
			onkeydown		The user pushes a keyboard key
			onload			The browser has finished loading the page

			<button onclick="this.innerHTML = Date()">The time is?</button>
	1.13.Strings, String Methods
			String Properties
			Property				Description
			constructor				Returns the string's constructor function
			length					Returns the length of a string
			prototype				Allows you to add properties and methods to an object
			String Methods
			Method	Description
			charAt()				Returns the character at the specified index (position)
			charCodeAt()			Returns the Unicode of the character at the specified index
			concat()				Joins two or more strings, and returns a new joined strings
			endsWith()				Checks whether a string ends with specified string/characters
			fromCharCode()			Converts Unicode values to characters
			includes()				Checks whether a string contains the specified string/characters
			indexOf()				Returns the position of the first found occurrence of a specified value in a string
			lastIndexOf()			Returns the position of the last found occurrence of a specified value in a string
			localeCompare()			Compares two strings in the current locale
			match()					Searches a string for a match against a regular expression, and returns the matches
			repeat()				Returns a new string with a specified number of copies of an existing string
			replace()				Searches a string for a specified value, or a regular expression, and returns a new string where the specified values are replaced
			search()				Searches a string for a specified value, or regular expression, and returns the position of the match
			slice()					Extracts a part of a string and returns a new string
			split()					Splits a string into an array of substrings
			startsWith()			Checks whether a string begins with specified characters
			substr()				Extracts the characters from a string, beginning at a specified start position, and through the specified number of character
			substring()				Extracts the characters from a string, between two specified indices
			toLocaleLowerCase()		Converts a string to lowercase letters, according to the host's locale
			toLocaleUpperCase()		Converts a string to uppercase letters, according to the host's locale
			toLowerCase()			Converts a string to lowercase letters
			toString()				Returns the value of a String object
			toUpperCase()			Converts a string to uppercase letters
			trim()					Removes whitespace from both ends of a string
			valueOf()				Returns the primitive value of a String object
	1.14.Numbers, Number Methods
			Global JavaScript Methods
			JavaScript global methods can be used on all JavaScript data types.
			These are the most relevant methods, when working with numbers:
			Method					Description
			Number()				Returns a number, converted from its argument.
			parseFloat()			Parses its argument and returns a floating point number
			parseInt()				Parses its argument and returns an integer
	1.15.Dates, Date Formats, Date Methods
			Method				Description
			getFullYear()		Get the year as a four digit number (yyyy)
			getMonth()			Get the month as a number (0-11)
			getDate()			Get the day as a number (1-31)
			getHours()			Get the hour (0-23)
			getMinutes()		Get the minute (0-59)
			getSeconds()		Get the second (0-59)
			getMilliseconds()	Get the millisecond (0-999)
			getTime()			Get the time (milliseconds since January 1, 1970)
			getDay()			Get the weekday as a number (0-6)
			Date.now()			Get the time. ECMAScript 5.
			Methods
			Date.UTC()
			Date.now()
			Date.parse()
			Date.prototype.getDate()
			Date.prototype.getDay()
			Date.prototype.getFullYear()
			Date.prototype.getHours()
			Date.prototype.getMilliseconds()
			Date.prototype.getMinutes()
			Date.prototype.getMonth()
			Date.prototype.getSeconds()
			Date.prototype.getTime()
			Date.prototype.getTimezoneOffset()
			Date.prototype.getUTCDate()
			Date.prototype.getUTCDay()
			Date.prototype.getUTCFullYear()
			Date.prototype.getUTCHours()
			Date.prototype.getUTCMilliseconds()
			Date.prototype.getUTCMinutes()
			Date.prototype.getUTCMonth()
			Date.prototype.getUTCSeconds()
			Date.prototype.getYear()
			Date.prototype.setDate()
			Date.prototype.setFullYear()
			Date.prototype.setHours()
			Date.prototype.setMilliseconds()
			Date.prototype.setMinutes()
			Date.prototype.setMonth()
			Date.prototype.setSeconds()
			Date.prototype.setTime()
			Date.prototype.setUTCDate()
			Date.prototype.setUTCFullYear()
			Date.prototype.setUTCHours()
			Date.prototype.setUTCMilliseconds()
			Date.prototype.setUTCMinutes()
			Date.prototype.setUTCMonth()
			Date.prototype.setUTCSeconds()
			Date.prototype.setYear()
			Date.prototype.toDateString()
			Date.prototype.toGMTString()
			Date.prototype.toISOString()
			Date.prototype.toJSON()
			Date.prototype.toLocaleDateString()
			Date.prototype.toLocaleFormat()
			Date.prototype.toLocaleString()
			Date.prototype.toLocaleTimeString()
			Date.prototype.toSource()
			Date.prototype.toString()
			Date.prototype.toTimeString()
			Date.prototype.toUTCString()
			Date.prototype.valueOf()
			Date.prototype[@@toPrimitive]
	1.16.Arrays, Array Methods
			var fruits = ['Apple', 'Banana'];

			console.log(fruits.length);
			// 2

			Properties
			Array.length
			Array.prototype
			Array.prototype[@@unscopables]
			Methods
			Array.from()
			Array.isArray()
			Array.observe()
			Array.of()
			Array.prototype.concat()
			Array.prototype.copyWithin()
			Array.prototype.entries()
			Array.prototype.every()
			Array.prototype.fill()
			Array.prototype.filter()
			Array.prototype.find()
			Array.prototype.findIndex()
			Array.prototype.flat()
			Array.prototype.flatMap()
			Array.prototype.forEach()
			Array.prototype.includes()
			Array.prototype.indexOf()
			Array.prototype.join()
			Array.prototype.keys()
			Array.prototype.lastIndexOf()
			Array.prototype.map()
			Array.prototype.pop()
			Array.prototype.push()
			Array.prototype.reduce()
			Array.prototype.reduceRight()
			Array.prototype.reverse()
			Array.prototype.shift()
			Array.prototype.slice()
			Array.prototype.some()
			Array.prototype.sort()
			Array.prototype.splice()
			Array.prototype.toLocaleString()
			Array.prototype.toSource()
			Array.prototype.toString()
			Array.prototype.unshift()
			Array.prototype.values()
			Array.prototype[@@iterator]()
			Array.unobserve()
			get Array[@@species]

	2.1. Booleans
			var x = Boolean(expression);     // preferred
			var x = new Boolean(expression); // don't use
	2.2. Comparisons
			console.log(1 == 1);
			// expected output: true

			console.log("1" == 1);
			// expected output: true

			console.log(1 === 1);
			// expected output: true

			console.log("1" === 1);
			// expected output: false
	2.3. Control Structures
			<script>
			function myFunction() {
			  var hour = new Date().getHours(); 
			  var greeting;
			  if (hour < 18) {
			    greeting = "Good day";
			  } else {
			    greeting = "Good evening";
			  }
			  document.getElementById("demo").innerHTML = greeting;
			}
			</script>
	2.4. Conditions
			In JavaScript we have the following conditional statements:
			if
			else
			else if
			switch

			Conditional (Ternary) Operator
			variablename = (condition) ? value1:value2 
	2.5. Switch
			switch (new Date().getDay()) {
			  case 0:
			    day = "Sunday";
			    break;
			  case 1:
			    day = "Monday";
			    break;
			  case 2:
			     day = "Tuesday";
			    break;
			  case 3:
			    day = "Wednesday";
			    break;
			  case 4:
			    day = "Thursday";
			    break;
			  case 5:
			    day = "Friday";
			    break;
			  case 6:
			    day = "Saturday";
			}
	2.6. Loop For
			var i;
			for (i = 0; i < cars.length; i++) { 
			  text += cars[i] + "<br>";
			}
	2.7. Loop While
			while (i < 10) {
			  text += "The number is " + i;
			  i++;
			}
	2.8. Break
			for (i = 0; i < 10; i++) {
			  if (i === 3) { break; }
			  text += "The number is " + i + "<br>";
			}

			for (i = 0; i < 10; i++) {
			  if (i === 3) { continue; }
			  text += "The number is " + i + "<br>";
			}
	2.9. Functions,Function Definitions,Function Parameters,Function Invocation, Function Closures
			Function Invocation - Calling a function.
			// invoking function using constructor
			function myFunction(arg1, arg2) {
			  this.firstName = arg1;
			  this.lastName  = arg2;
			}

			// This creates a new object
			var x = new myFunction("John", "Doe");
			x.firstName; 

			Function Closures
			function init() {
			  var name = 'Mozilla'; // name is a local variable created by init
			  function displayName() { // displayName() is the inner function, a closure
			    alert(name); // use variable declared in the parent function    
			  }
			  displayName();    
			}
			init();
			init() creates a local variable called name and a function called displayName(). The displayName() function is an inner function that is defined inside init() and is only available within the body of the  init() function. The displayName() function has no local variables of its own. However, because inner functions have access to the variables of outer functions, displayName() can access the variable name declared in the parent function, init(). However, the same local variables in displayName() will be used if they exist.
	3.1. Objects,Object Definitions,Object Properties,Object Methods,Object Prototypes
			JavaScript is designed on a simple object-based paradigm. An object is a collection of properties, and a property is an association between a name (or key) and a value. A property's value can be a function, in which case the property is known as a method. In addition to objects that are predefined in the browser, you can define your own objects. This chapter describes how to use objects, properties, functions, and methods, and how to create your own objects.

			Properties
			Properties
			Object.prototype                   iMP
			Object.prototype.__count__
			Object.prototype.__noSuchMethod__
			Object.prototype.__parent__
			Object.prototype.__proto__
			Object.prototype.constructor       iMP

			Method
			Methods
			Object.assign()
			Object.create()
			Object.defineProperties()
			Object.defineProperty()
			Object.entries()
			Object.freeze()
			Object.fromEntries()
			Object.getNotifier()
			Object.getOwnPropertyDescriptor()
			Object.getOwnPropertyDescriptors()
			Object.getOwnPropertyNames()
			Object.getOwnPropertySymbols()
			Object.getPrototypeOf()
			Object.is()
			Object.isExtensible()
			Object.isFrozen()
			Object.isSealed()
			Object.keys()
			Object.observe()
			Object.preventExtensions()
			Object.prototype.__defineGetter__()
			Object.prototype.__defineSetter__()
			Object.prototype.__lookupGetter__()
			Object.prototype.__lookupSetter__()
			Object.prototype.eval()
			Object.prototype.hasOwnProperty()
			Object.prototype.isPrototypeOf()
			Object.prototype.propertyIsEnumerable()
			Object.prototype.toLocaleString()
			Object.prototype.toSource()
			Object.prototype.toString()
			Object.prototype.unwatch()
			Object.prototype.valueOf()
			Object.prototype.watch()
			Object.seal()
			Object.setPrototypeOf()
			Object.unobserve()
			Object.values()

			Object Prototypes
			Nearly all objects in JavaScript are instances of Object; a typical object inherits properties (including methods) from Object.prototype, although these properties may be shadowed (a.k.a. overridden). However, an Object may be deliberately created for which this is not true (e.g. by Object.create(null)), or it may be altered so that this is no longer true (e.g. with Object.setPrototypeOf).
	3.2. Object Oriented Programing
		3.2.1.  Method
				<p id="demo"></p>

				<script>
				// Create an object:
				var person = {
				  firstName: "John",
				  lastName : "Doe",
				  id     : 5566,
				  fullName : function() {			//closure function
				    return this.firstName + " " + this.lastName;
				  }
				};

				// Display data from the object:
				document.getElementById("demo").innerHTML = person.fullName();
				</script>
		3.2.2.  Constructor
				class Polygon {
				  constructor() {
				    this.name = "Polygon";
				  }
				}

				var poly1 = new Polygon();

				console.log(poly1.name);
				// expected output: "Polygon"
		3.2.3.  Inheritance
				var ClassA = function() {
				    this.name = "class A";
				}

				ClassA.prototype.print = function() {
				    console.log(this.name);
				}

				var a = new ClassA();

				a.print();
		3.2.4.  Encapsulation
				public class Person
				{
				  //properties/fields
				  private int height = 68;
				  private int weight = 170;
				  private string name = "Rob Gravelle";
				  private string socialInsuranceNumber = "555 555 555";

				  //methods/actions
				  public void setHeight(int height) {this.height=height;}
				  public int getHeight() { return this.height; }
				  public void setWeight(int weight) {this.weight = weight;}
				  public int getWeight() { return this.weight; }
				  public void setName(string name) {this.name=name;}
				  public int getName() { return this.name; }
				  public int setSocialInsuranceNumber(string socialInsuranceNumber) { this.socialInsuranceNumber=socialInsuranceNumber; }
				}
				//instanciate the Person class
				Person aPerson = new Person();
				string myName = aPerson.getName(); //myName now contains "Rob Gravelle"
				aPerson.setName("mud"); //change the name
				string myName = aPerson.getName(); //aPerson's name is now "mud"
				string sinNo = aPerson.getSocialInsuranceNumber() //will throw an exception.  No getter implemented for that field!
		3.2.5.  Abstraction
				var foo = function () {};

				// logs "foo is a Function: true"
				console.log('foo is a Function: ' + (foo instanceof Function));

				// logs "foo.prototype is an Object: true"
				console.log('foo.prototype is an Object: ' + (foo.prototype instanceof Object));
		3.2.6.  Polymorphism
				https://developer.mozilla.org/ms/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript

				Polymorphism is one of the tenets of Object Oriented Programming (OOP). It is the practice of designing objects to share behaviors and to be able to override shared behaviors with specific ones. Polymorphism takes advantage of inheritance in order to make this happen.

				In OOP everything is considered to be modeled as an object. This abstraction can be taken all the way down to nuts and bolts for a car, or as broad as simply a car type with a year, make, and model.

				To have a polymorphic car scenario there would be the base car type, and then there would subclasses which would inherit from car and provide their own behaviors on top of the basic behaviors a car would have. For example, a subclass could be TowTruck which would still have a year make and model, but might also have some extra behaviors and properties which could be as basic as a flag for IsTowing to as complicated as the specifics of the lift.

				Getting back to the example of people and employees, all employees are people, but all people are not employees. Which is to say that people will be the super class, and employee the sub class. People may have ages and weights, but they do not have salaries. Employees are people so they will inherently have an age and weight, but also because they are employees they will have a salary.

				So in order to facilitate this, we will first write out the super class (Person)

				function Person(age,weight){
				 this.age = age;
				 this.weight = weight;
				}
				And we will give Person the ability to share their information

				Person.prototype.getInfo = function(){
				 return "I am " + this.age + " years old " +
				    "and weighs " + this.weight +" kilo.";
				};
				Next we wish to have a subclass of Person, Employee

				function Employee(age,weight,salary){
				 this.age = age;
				 this.weight = weight;
				 this.salary = salary;
				}
				Employee.prototype = new Person();
				And we will override the behavior of getInfo by defining one which is more fitting to an Employee

				Employee.prototype.getInfo = function(){
				 return "I am " + this.age + " years old " +
				    "and weighs " + this.weight +" kilo " +
				    "and earns " + this.salary + " dollar.";  
				};
				These can be used similar to your original code use

				var person = new Person(50,90);
				var employee = new Employee(43,80,50000);

				console.log(person.getInfo());
				console.log(employee.getInfo());
				However, there isn't much gained using inheritance here as Employee's constructor is so similar to person's, and the only function in the prototype is being overridden. The power in polymorphic design is to share behaviors.
				
	4.1. JavaScript Validations
			Data Validation
			Data validation is the process of ensuring that user input is clean, correct, and useful.

			Typical validation tasks are:

			has the user filled in all required fields?
			has the user entered a valid date?
			has the user entered text in a numeric field?
			Most often, the purpose of data validation is to ensure correct user input.

			Validation can be defined by many different methods, and deployed in many different ways.

			Server side validation is performed by a web server, after input has been sent to the server.

			Client side validation is performed by a web browser, before input is sent to a web server.

			HTML Constraint Validation
			HTML5 introduced a new HTML validation concept called constraint validation.

			HTML constraint validation is based on:

			Constraint validation HTML Input Attributes
			Constraint validation CSS Pseudo Selectors
			Constraint validation DOM Properties and Methods
			Constraint Validation HTML Input Attributes
			Attribute	Description
			disabled	Specifies that the input element should be disabled
			max	Specifies the maximum value of an input element
			min	Specifies the minimum value of an input element
			pattern	Specifies the value pattern of an input element
			required	Specifies that the input field requires an element
			type 	Specifies the type of an input element
			For a full list, go to HTML Input Attributes.

			Constraint Validation CSS Pseudo Selectors
			Selector	Description
			:disabled	Selects input elements with the "disabled" attribute specified
			:invalid	Selects input elements with invalid values
			:optional	Selects input elements with no "required" attribute specified
			:required	Selects input elements with the "required" attribute specified
			:valid	Selects input elements with valid values

			<form name="myForm" action="/action_page.php" onsubmit="return validateForm()" method="post">
			Name: <input type="text" name="fname">
			<input type="submit" value="Submit">
			</form>
	4.2. Document Object Model, Document and Events(DOM Manipulation)
			What is the HTML DOM?
			The HTML DOM is a standard object model and programming interface for HTML. It defines:

			The HTML elements as objects
			The properties of all HTML elements
			The methods to access all HTML elements
			The events for all HTML elements
			In other words: The HTML DOM is a standard for how to get, change, add, or delete HTML elements.

			<p id="p1">
			This is a text.
			This is a text.
			This is a text.
			</p>

			<input type="button" value="Hide text" 
			onclick="document.getElementById('p1').style.visibility='hidden'">

			<input type="button" value="Show text"
			onclick="document.getElementById('p1').style.visibility='visible'">
			
	4.3. HTML DOM (see above eg.)
	4.4. DOM Intro
			The Document Object Model (DOM) is a programming interface for HTML and XML documents. It represents the page so that programs can change the document structure, style, and content. The DOM represents the document as nodes and objects. That way, programming languages can connect to the page.

			A Web page is a document. This document can be either displayed in the browser window or as the HTML source. But it is the same document in both cases. The Document Object Model (DOM) represents that same document so it can be manipulated. The DOM is an object-oriented representation of the web page, which can be modified with a scripting language such as JavaScript.
	4.5. DOM Methods
			Property / Method	Description
			accessKey	Sets or returns the accesskey attribute of an element
			addEventListener()	Attaches an event handler to the specified element
			appendChild()	Adds a new child node, to an element, as the last child node
			attributes	Returns a NamedNodeMap of an element's attributes
			blur()	Removes focus from an element
			childElementCount	Returns the number of child elements an element has
			childNodes	Returns a collection of an element's child nodes (including text and comment nodes)
			children	Returns a collection of an element's child element (excluding text and comment nodes)
			classList	Returns the class name(s) of an element
			className	Sets or returns the value of the class attribute of an element
			click()	Simulates a mouse-click on an element
			clientHeight	Returns the height of an element, including padding
			clientLeft	Returns the width of the left border of an element
			clientTop	Returns the width of the top border of an element
			clientWidth	Returns the width of an element, including padding
			cloneNode()	Clones an element
			compareDocumentPosition()	Compares the document position of two elements
			contains()	Returns true if a node is a descendant of a node, otherwise false
			contentEditable	Sets or returns whether the content of an element is editable or not
			dir	Sets or returns the value of the dir attribute of an element
			exitFullscreen()	Cancels an element in fullscreen mode
			firstChild	Returns the first child node of an element
			firstElementChild	Returns the first child element of an element
			focus()	Gives focus to an element
			getAttribute()	Returns the specified attribute value of an element node
			getAttributeNode()	Returns the specified attribute node
			getBoundingClientRect()	Returns the size of an element and its position relative to the viewport
			getElementsByClassName()	Returns a collection of all child elements with the specified class name
			getElementsByTagName()	Returns a collection of all child elements with the specified tag name
			hasAttribute()	Returns true if an element has the specified attribute, otherwise false
			hasAttributes()	Returns true if an element has any attributes, otherwise false
			hasChildNodes()	Returns true if an element has any child nodes, otherwise false
			id	Sets or returns the value of the id attribute of an element
			innerHTML	Sets or returns the content of an element
			innerText	Sets or returns the text content of a node and its descendants
			insertAdjacentElement()	Inserts a HTML element at the specified position relative to the current element
			insertAdjacentHTML()	Inserts a HTML formatted text at the specified position relative to the current element
			insertAdjacentText()	Inserts text into the specified position relative to the current element
			insertBefore()	Inserts a new child node before a specified, existing, child node
			isContentEditable	Returns true if the content of an element is editable, otherwise false
			isDefaultNamespace()	Returns true if a specified namespaceURI is the default, otherwise false
			isEqualNode()	Checks if two elements are equal
			isSameNode()	Checks if two elements are the same node
			isSupported()	Returns true if a specified feature is supported on the element
			lang	Sets or returns the value of the lang attribute of an element
			lastChild	Returns the last child node of an element
			lastElementChild	Returns the last child element of an element
			namespaceURI	Returns the namespace URI of an element
			nextSibling	Returns the next node at the same node tree level
			nextElementSibling	Returns the next element at the same node tree level
			nodeName	Returns the name of a node
			nodeType	Returns the node type of a node
			nodeValue	Sets or returns the value of a node
			normalize()	Joins adjacent text nodes and removes empty text nodes in an element
			offsetHeight	Returns the height of an element, including padding, border and scrollbar
			offsetWidth	Returns the width of an element, including padding, border and scrollbar
			offsetLeft	Returns the horizontal offset position of an element
			offsetParent	Returns the offset container of an element
			offsetTop	Returns the vertical offset position of an element
			ownerDocument	Returns the root element (document object) for an element
			parentNode	Returns the parent node of an element
			parentElement	Returns the parent element node of an element
			previousSibling	Returns the previous node at the same node tree level
			previousElementSibling	Returns the previous element at the same node tree level
			querySelector()	Returns the first child element that matches a specified CSS selector(s) of an element
			querySelectorAll()	Returns all child elements that matches a specified CSS selector(s) of an element
			removeAttribute()	Removes a specified attribute from an element
			removeAttributeNode()	Removes a specified attribute node, and returns the removed node
			removeChild()	Removes a child node from an element
			removeEventListener()	Removes an event handler that has been attached with the addEventListener() method
			replaceChild()	Replaces a child node in an element
			requestFullscreen()	Shows an element in fullscreen mode
			scrollHeight	Returns the entire height of an element, including padding
			scrollIntoView()	Scrolls the specified element into the visible area of the browser window
			scrollLeft	Sets or returns the number of pixels an element's content is scrolled horizontally
			scrollTop	Sets or returns the number of pixels an element's content is scrolled vertically
			scrollWidth	Returns the entire width of an element, including padding
			setAttribute()	Sets or changes the specified attribute, to the specified value
			setAttributeNode()	Sets or changes the specified attribute node
			style	Sets or returns the value of the style attribute of an element
			tabIndex	Sets or returns the value of the tabindex attribute of an element
			tagName	Returns the tag name of an element
			textContent	Sets or returns the textual content of a node and its descendants
			title	Sets or returns the value of the title attribute of an element
			toString()	Converts an element to a string

	4.6. DOM Document
	4.7. DOM Elements
			A DOM element is something like a DIV, HTML, BODY element on a page. You can add classes to all of these using CSS, or interact with them using JS.
	4.8. DOM HTML
	4.9. DOM CSS
			<html>
			<body>

			<p id="p2">Hello World!</p>

			<script>
			document.getElementById("p2").style.color = "blue";
			</script>

			<p>The paragraph above was changed by a script.</p>

			</body>
			</html>
	4.10.DOM Animations
						<style>
			#container {
			  width: 400px;
			  height: 400px;
			  position: relative;
			  background: yellow;
			}
			#animate {
			  width: 50px;
			  height: 50px;
			  position: absolute;
			  background-color: red;
			}
			</style>
			<body>

			<p><button onclick="myMove()">Click Me</button></p> 

			<div id ="container">
			  <div id ="animate"></div>
			</div>

			<script>
			function myMove() {
			  var elem = document.getElementById("animate");   
			  var pos = 0;
			  var id = setInterval(frame, 5);
			  function frame() {
			    if (pos == 350) {
			      clearInterval(id);
			    } else {
			      pos++; 
			      elem.style.top = pos + "px"; 
			      elem.style.left = pos + "px"; 
			    }
			  }
			}
			</script>
	4.11.DOM Events
	HTML DOM Events
			HTML DOM events allow JavaScript to register different event handlers on elements in an HTML document.

			Events are normally used in combination with functions, and the function will not be executed before the event occurs (such as when a user clicks a button).

			Event	Description	Belongs To
			abort	The event occurs when the loading of a media is aborted	UiEvent, Event
			afterprint	The event occurs when a page has started printing, or if the print dialogue box has been closed	Event
			animationend	The event occurs when a CSS animation has completed	AnimationEvent
			animationiteration	The event occurs when a CSS animation is repeated	AnimationEvent
			animationstart	The event occurs when a CSS animation has started	AnimationEvent
			beforeprint	The event occurs when a page is about to be printed	Event
			beforeunload	The event occurs before the document is about to be unloaded	UiEvent, Event
			blur	The event occurs when an element loses focus	FocusEvent
			canplay	The event occurs when the browser can start playing the media (when it has buffered enough to begin)	Event
			canplaythrough	The event occurs when the browser can play through the media without stopping for buffering	Event
			change	The event occurs when the content of a form element, the selection, or the checked state have changed (for <input>, <select>, and <textarea>)	Event
			click	The event occurs when the user clicks on an element	MouseEvent
			contextmenu	The event occurs when the user right-clicks on an element to open a context menu	MouseEvent
			copy	The event occurs when the user copies the content of an element	ClipboardEvent
			cut	The event occurs when the user cuts the content of an element	ClipboardEvent
			dblclick	The event occurs when the user double-clicks on an element	MouseEvent
			drag	The event occurs when an element is being dragged	DragEvent
			dragend	The event occurs when the user has finished dragging an element	DragEvent
			dragenter	The event occurs when the dragged element enters the drop target	DragEvent
			dragleave	The event occurs when the dragged element leaves the drop target	DragEvent
			dragover	The event occurs when the dragged element is over the drop target	DragEvent
			dragstart	The event occurs when the user starts to drag an element	DragEvent
			drop	The event occurs when the dragged element is dropped on the drop target	DragEvent
			durationchange	The event occurs when the duration of the media is changed	Event
			ended	The event occurs when the media has reach the end (useful for messages like "thanks for listening")	Event
			error	The event occurs when an error occurs while loading an external file	ProgressEvent, UiEvent, Event
			focus	The event occurs when an element gets focus	FocusEvent
			focusin	The event occurs when an element is about to get focus	FocusEvent
			focusout	The event occurs when an element is about to lose focus	FocusEvent
			fullscreenchange	The event occurs when an element is displayed in fullscreen mode	Event
			fullscreenerror	The event occurs when an element can not be displayed in fullscreen mode	Event
			hashchange	The event occurs when there has been changes to the anchor part of a URL	HashChangeEvent
			input	The event occurs when an element gets user input	InputEvent, Event
			invalid	The event occurs when an element is invalid	Event
			keydown	The event occurs when the user is pressing a key	KeyboardEvent
			keypress	The event occurs when the user presses a key	KeyboardEvent
			keyup	The event occurs when the user releases a key	KeyboardEvent
			load	The event occurs when an object has loaded	UiEvent, Event
			loadeddata	The event occurs when media data is loaded	Event
			loadedmetadata	The event occurs when meta data (like dimensions and duration) are loaded	Event
			loadstart	The event occurs when the browser starts looking for the specified media	ProgressEvent
			message	The event occurs when a message is received through the event source	Event
			mousedown	The event occurs when the user presses a mouse button over an element	MouseEvent
			mouseenter	The event occurs when the pointer is moved onto an element	MouseEvent
			mouseleave	The event occurs when the pointer is moved out of an element	MouseEvent
			mousemove	The event occurs when the pointer is moving while it is over an element	MouseEvent
			mouseover	The event occurs when the pointer is moved onto an element, or onto one of its children	MouseEvent
			mouseout	The event occurs when a user moves the mouse pointer out of an element, or out of one of its children	MouseEvent
			mouseup	The event occurs when a user releases a mouse button over an element	MouseEvent
			mousewheel	Deprecated. Use the wheel event instead	WheelEvent
			offline	The event occurs when the browser starts to work offline	Event
			online	The event occurs when the browser starts to work online	Event
			open	The event occurs when a connection with the event source is opened	Event
			pagehide	The event occurs when the user navigates away from a webpage	PageTransitionEvent
			pageshow	The event occurs when the user navigates to a webpage	PageTransitionEvent
			paste	The event occurs when the user pastes some content in an element	ClipboardEvent
			pause	The event occurs when the media is paused either by the user or programmatically	Event
			play	The event occurs when the media has been started or is no longer paused	Event
			playing	The event occurs when the media is playing after having been paused or stopped for buffering	Event
			popstate	The event occurs when the window's history changes	PopStateEvent
			progress	The event occurs when the browser is in the process of getting the media data (downloading the media)	Event
			ratechange	The event occurs when the playing speed of the media is changed	Event
			resize	The event occurs when the document view is resized	UiEvent, Event
			reset	The event occurs when a form is reset	Event
			scroll	The event occurs when an element's scrollbar is being scrolled	UiEvent, Event
			search	The event occurs when the user writes something in a search field (for <input="search">)	Event
			seeked	The event occurs when the user is finished moving/skipping to a new position in the media	Event
			seeking	The event occurs when the user starts moving/skipping to a new position in the media	Event
			select	The event occurs after the user selects some text (for <input> and <textarea>)	UiEvent, Event
			show	The event occurs when a <menu> element is shown as a context menu	Event
			stalled	The event occurs when the browser is trying to get media data, but data is not available	Event
			storage	The event occurs when a Web Storage area is updated	StorageEvent
			submit	The event occurs when a form is submitted	Event
			suspend	The event occurs when the browser is intentionally not getting media data	Event
			timeupdate	The event occurs when the playing position has changed (like when the user fast forwards to a different point in the media)	Event
			toggle	The event occurs when the user opens or closes the <details> element	Event
			touchcancel	The event occurs when the touch is interrupted	TouchEvent
			touchend	The event occurs when a finger is removed from a touch screen	TouchEvent
			touchmove	The event occurs when a finger is dragged across the screen	TouchEvent
			touchstart	The event occurs when a finger is placed on a touch screen	TouchEvent
			transitionend	The event occurs when a CSS transition has completed	TransitionEvent
			unload	The event occurs once a page has unloaded (for <body>)	UiEvent, Event
			volumechange	The event occurs when the volume of the media has changed (includes setting the volume to "mute")	Event
			waiting	The event occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)	Event
			wheel	The event occurs when the mouse wheel rolls up or down over an element	WheelEvent

			HTML DOM Event Properties and Methods
			Property/Method	Description	Belongs To
			altKey	Returns whether the "ALT" key was pressed when the mouse event was triggered	MouseEvent
			altKey	Returns whether the "ALT" key was pressed when the key event was triggered	KeyboardEvent, TouchEvent
			animationName	Returns the name of the animation	AnimationEvent
			bubbles	Returns whether or not a specific event is a bubbling event	Event
			button	Returns which mouse button was pressed when the mouse event was triggered	MouseEvent
			buttons	Returns which mouse buttons were pressed when the mouse event was triggered	MouseEvent
			cancelable	Returns whether or not an event can have its default action prevented	Event
			charCode	Returns the Unicode character code of the key that triggered the onkeypress event	KeyboardEvent
			changeTouches	Returns a list of all the touch objects whose state changed between the previous touch and this touch	TouchEvent
			clientX	Returns the horizontal coordinate of the mouse pointer, relative to the current window, when the mouse event was triggered	MouseEvent, TouchEvent
			clientY	Returns the vertical coordinate of the mouse pointer, relative to the current window, when the mouse event was triggered	MouseEvent, TouchEvent
			clipboardData	Returns an object containing the data affected by the clipboard operation	ClipboardData
			code	Returns the code of the key that triggered the event	KeyboardEvent
			composed	Returns whether the event is composed or not	Event
			createEvent()	Creates a new event	Event
			ctrlKey	Returns whether the "CTRL" key was pressed when the mouse event was triggered	MouseEvent
			ctrlKey	Returns whether the "CTRL" key was pressed when the key event was triggered	KeyboardEvent, TouchEvent
			currentTarget	Returns the element whose event listeners triggered the event	Event
			data	Returns the inserted characters	InputEvent
			dataTransfer	Returns an object containing the data being dragged/dropped, or inserted/deleted	DragEvent, InputEvent
			defaultPrevented	Returns whether or not the preventDefault() method was called for the event	Event
			deltaX	Returns the horizontal scroll amount of a mouse wheel (x-axis)	WheelEvent
			deltaY	Returns the vertical scroll amount of a mouse wheel (y-axis)	WheelEvent
			deltaZ	Returns the scroll amount of a mouse wheel for the z-axis	WheelEvent
			deltaMode	Returns a number that represents the unit of measurements for delta values (pixels, lines or pages)	WheelEvent
			detail	Returns a number that indicates how many times the mouse was clicked	UiEvent
			elapsedTime	Returns the number of seconds an animation has been running	AnimationEvent
			elapsedTime	Returns the number of seconds a transition has been running	 
			eventPhase	Returns which phase of the event flow is currently being evaluated	Event
			getTargetRanges()	Returns an array containing target ranges that will be affected by the insertion/deletion	InputEvent
			getModifierState()	Returns an array containing target ranges that will be affected by the insertion/deletion	MouseEvent
			inputType	Returns the type of the change (i.e "inserting" or "deleting")	InputEvent
			isComposing	Returns whether the state of the event is composing or not	InputEvent, KeyboardEvent
			isTrusted	Returns whether or not an event is trusted	Event
			key	Returns the key value of the key represented by the event	KeyboardEvent
			key	Returns the key of the changed storage item	StorageEvent
			keyCode	Returns the Unicode character code of the key that triggered the onkeypress event, or the Unicode key code of the key that triggered the onkeydown or onkeyup event	KeyboardEvent
			location	Returns the location of a key on the keyboard or device	KeyboardEvent
			lengthComputable	Returns whether the length of the progress can be computable or not	ProgressEvent
			loaded	Returns how much work has been loaded	ProgressEvent
			metaKey	Returns whether the "META" key was pressed when an event was triggered	MouseEvent
			metaKey	Returns whether the "meta" key was pressed when the key event was triggered	KeyboardEvent, TouchEvent
			MovementX	Returns the horizontal coordinate of the mouse pointer relative to the position of the last mousemove event	MouseEvent
			MovementY	Returns the vertical coordinate of the mouse pointer relative to the position of the last mousemove event	MouseEvent
			newValue	Returns the new value of the changed storage item	StorageEvent
			newURL	Returns the URL of the document, after the hash has been changed	HasChangeEvent
			offsetX	Returns the horizontal coordinate of the mouse pointer relative to the position of the edge of the target element	MouseEvent
			offsetY	Returns the vertical coordinate of the mouse pointer relative to the position of the edge of the target element	MouseEvent
			oldValue	Returns the old value of the changed storage item	StorageEvent
			oldURL	Returns the URL of the document, before the hash was changed	HasChangeEvent
			onemptied	The event occurs when something bad happens and the media file is suddenly unavailable (like unexpectedly disconnects)	 
			pageX	Returns the horizontal coordinate of the mouse pointer, relative to the document, when the mouse event was triggered	MouseEvent
			pageY	Returns the vertical coordinate of the mouse pointer, relative to the document, when the mouse event was triggered	MouseEvent
			persisted	Returns whether the webpage was cached by the browser	PageTransitionEvent
			preventDefault()	Cancels the event if it is cancelable, meaning that the default action that belongs to the event will not occur	Event
			propertyName	Returns the name of the CSS property associated with the animation or transition	AnimationEvent, TransitionEvent
			pseudoElement	Returns the name of the pseudo-element of the animation or transition	AnimationEvent, TransitionEvent
			region		MouseEvent
			relatedTarget	Returns the element related to the element that triggered the mouse event	MouseEvent
			relatedTarget	Returns the element related to the element that triggered the event	FocusEvent
			repeat	Returns whether a key is being hold down repeatedly, or not	KeyboardEvent
			screenX	Returns the horizontal coordinate of the mouse pointer, relative to the screen, when an event was triggered	MouseEvent
			screenY	Returns the vertical coordinate of the mouse pointer, relative to the screen, when an event was triggered	MouseEvent
			shiftKey	Returns whether the "SHIFT" key was pressed when an event was triggered	MouseEvent
			shiftKey	Returns whether the "SHIFT" key was pressed when the key event was triggered	KeyboardEvent, TouchEvent
			state	Returns an object containing a copy of the history entries	PopStateEvent
			stopImmediatePropagation()	Prevents other listeners of the same event from being called	Event
			stopPropagation()	Prevents further propagation of an event during event flow	Event
			storageArea	Returns an object representing the affected storage object	StorageEvent
			target	Returns the element that triggered the event	Event
			targetTouches	Returns a list of all the touch objects that are in contact with the surface and where the touchstart event occured on the same target element as the current target element	TouchEvent
			timeStamp	Returns the time (in milliseconds relative to the epoch) at which the event was created	Event
			total	Returns the total amount of work that will be loaded	ProgressEvent
			touches	Returns a list of all the touch objects that are currently in contact with the surface	TouchEvent
			transitionend	The event occurs when a CSS transition has completed	TransitionEvent
			type	Returns the name of the event	Event
			url	Returns the URL of the changed item's document	StorageEvent
			which	Returns which mouse button was pressed when the mouse event was triggered	MouseEvent
			which	Returns the Unicode character code of the key that triggered the onkeypress event, or the Unicode key code of the key that triggered the onkeydown or onkeyup event	KeyboardEvent
			view	Returns a reference to the Window object where the event occurred	UiEvent
	4.12.DOM EventListener
			The addEventListener() method
			Example
			Add an event listener that fires when a user clicks a button:

			document.getElementById("myBtn").addEventListener("click", displayDate);
			Add an Event Handler to an Element
			Example
			Alert "Hello World!" when the user clicks on an element:

			element.addEventListener("click", function(){ alert("Hello World!"); });
			Add Many Event Handlers to the Same Element
			The addEventListener() method allows you to add many events to the same element, without overwriting existing events:

			Example
			element.addEventListener("click", myFunction);
			element.addEventListener("click", mySecondFunction);

	4.13.DOM Navigation
			DOM Nodes
			According to the W3C HTML DOM standard, everything in an HTML document is a node:

			The entire document is a document node
			Every HTML element is an element node
			The text inside HTML elements are text nodes
			Every HTML attribute is an attribute node (deprecated)
			All comments are comment nodes

			Node Relationships
			The nodes in the node tree have a hierarchical relationship to each other.

			The terms parent, child, and sibling are used to describe the relationships.

			In a node tree, the top node is called the root (or root node)
			Every node has exactly one parent, except the root (which has no parent)
			A node can have a number of children
			Siblings (brothers or sisters) are nodes with the same parent

			From the HTML above you can read:

			<html> is the root node
			<html> has no parents
			<html> is the parent of <head> and <body>
			<head> is the first child of <html>
			<body> is the last child of <html>
			and:

			<head> has one child: <title>
			<title> has one child (a text node): "DOM Tutorial"
			<body> has two children: <h1> and <p>
			<h1> has one child: "DOM Lesson one"
			<p> has one child: "Hello world!"
			<h1> and <p> are siblings

			Navigating Between Nodes
			You can use the following node properties to navigate between nodes with JavaScript:

			parentNode
			childNodes[nodenumber]
			firstChild
			lastChild
			nextSibling
			previousSibling

			var myTitle = document.getElementById("demo").firstChild.nodeValue;
	4.14.DOM Nodes
			<head> has one child: <title>
			<title> has one child (a text node): "DOM Tutorial"
			<body> has two children: <h1> and <p>
			<h1> has one child: "DOM Lesson one"
			<p> has one child: "Hello world!"
			<h1> and <p> are siblings
			<html> parent node , <head>,<title>,<body>,<h1>,<p>,<h1>  are child nodes.

	4.15.DOM Nodelist
			A NodeList object is a list (collection) of nodes extracted from a document.
			A NodeList object is almost the same as an HTMLCollection object.
			var myNodelist = document.querySelectorAll("p");
			var i;
			for (i = 0; i < myNodelist.length; i++) {
			  myNodelist[i].style.backgroundColor = "red";
			}
	4.16.Object hierarchy in Java Script
			//check html-dom-objects



	5.1. Debugging
			Code Debugging
			Programming code might contain syntax errors, or logical errors.
			Many of these errors are difficult to diagnose.
			Often, when programming code contains errors, nothing will happen. There are no error messages, and you will get no indications where to search for errors.
			Searching for (and fixing) errors in programming code is called code debugging.

			JavaScript Debuggers
			Debugging is not easy. But fortunately, all modern browsers have a built-in JavaScript debugger.
			Built-in debuggers can be turned on and off, forcing errors to be reported to the user.
			With a debugger, you can also set breakpoints (places where code execution can be stopped), and examine variables while the code is executing.
			Normally, otherwise follow the steps at the bottom of this page, you activate debugging in your browser with the F12 key, and select "Console" in the debugger menu.

			Console.log() method
			<script>
			a = 5;
			b = 6;
			c = a + b;
			console.log(c);
			</script>

			Setting Breakpoints
			The debugger Keyword
			var x = 15 * 5;
			debugger;
			document.getElementById("demo").innerHTML = x;
	5.2. Type Conversion, Regular Expression
			JavaScript Data Types
			In JavaScript there are 5 different data types that can contain values:
			string
			number
			boolean
			object
			function
			There are 3 types of objects:

			Object
			Date
			Array
			And 2 data types that cannot contain values:

			null
			undefined

			String(false)
			true.toString()
			String(Date())
			Date().toString()
	5.3. Errors, Debugging
			function myFunction() {
			  var message, x;
			  message = document.getElementById("p01");
			  message.innerHTML = "";
			  x = document.getElementById("demo").value;
			  try { 
			    if(x == "") throw "is empty";
			    if(isNaN(x)) throw "is not a number";
			    x = Number(x);
			    if(x > 10) throw "is too high";
			    if(x < 5) throw "is too low";
			  }
			  catch(err) {
			    message.innerHTML = "Error: " + err + ".";
			  }
			  finally {
			    document.getElementById("demo").value = "";
			  }
			}
	5.4. Forms
		5.4.1. Forms Validation
				<script> 
				function GEEKFORGEEKS()                                    
				{ 
				    var name = document.forms["RegForm"]["Name"];               
				    var email = document.forms["RegForm"]["EMail"];    
				    var phone = document.forms["RegForm"]["Telephone"];  
				    var what =  document.forms["RegForm"]["Subject"];  
				    var password = document.forms["RegForm"]["Password"];  
				    var address = document.forms["RegForm"]["Address"];  
				   
				    if (name.value == "")                                  
				    { 
				        window.alert("Please enter your name."); 
				        name.focus(); 
				        return false; 
				    } 
				   
				    if (address.value == "")                               
				    { 
				        window.alert("Please enter your address."); 
				        name.focus(); 
				        return false; 
				    } 
				       
				    if (email.value == "")                                   
				    { 
				        window.alert("Please enter a valid e-mail address."); 
				        email.focus(); 
				        return false; 
				    } 
				   
				    if (email.value.indexOf("@", 0) < 0)                 
				    { 
				        window.alert("Please enter a valid e-mail address."); 
				        email.focus(); 
				        return false; 
				    } 
				   
				    if (email.value.indexOf(".", 0) < 0)                 
				    { 
				        window.alert("Please enter a valid e-mail address."); 
				        email.focus(); 
				        return false; 
				    } 
				   
				    if (phone.value == "")                           
				    { 
				        window.alert("Please enter your telephone number."); 
				        phone.focus(); 
				        return false; 
				    } 
				   
				    if (password.value == "")                        
				    { 
				        window.alert("Please enter your password"); 
				        password.focus(); 
				        return flase; 
				    } 
				   
				    if (what.selectedIndex < 1)                  
				    { 
				        alert("Please enter your course."); 
				        what.focus(); 
				        return false; 
				    } 
				   
				    return true; 
				}</script> 
		5.4.2. Forms API
				JQuery, etc.
	
	6.1. JS Browser BOM, Window, Screen, Location, History, Navigator, Popup alert, Timing, Cookies
			The Browser Object Model (BOM)
			There are no official standards for the Browser Object Model (BOM).

			Since modern browsers have implemented (almost) the same methods and properties for JavaScript interactivity, it is often referred to, as methods and properties of the BOM.

			The Window Object
			The window object is supported by all browsers. It represents the browser's window.
			All global JavaScript objects, functions, and variables automatically become members of the window object.
			Global variables are properties of the window object.
			Global functions are methods of the window object.
			Even the document object (of the HTML DOM) is a property of the window object:

			window.document.getElementById("header");
			is the same as:
			document.getElementById("header");
		
			Window Size
			Two properties can be used to determine the size of the browser window.
			Both properties return the sizes in pixels:

			window.innerHeight - the inner height of the browser window (in pixels)
			window.innerWidth - the inner width of the browser window (in pixels)
			The browser window (the browser viewport) is NOT including toolbars and scrollbars.
			For Internet Explorer 8, 7, 6, 5:

			document.documentElement.clientHeight
			document.documentElement.clientWidth
			or
			document.body.clientHeight
			document.body.clientWidth
			A practical JavaScript solution (covering all browsers):
			<script>
				var w = window.innerWidth
				|| document.documentElement.clientWidth
				|| document.body.clientWidth;

				var h = window.innerHeight
				|| document.documentElement.clientHeight
				|| document.body.clientHeight;

				var x = document.getElementById("demo");
				x.innerHTML = "Browser inner window width: " + w + ", height: " + h + ".";
			</script>

			window.open() - open a new window
			window.close() - close the current window
			window.moveTo() -move the current window
			window.resizeTo() -resize the current window

			Screen
			Window Screen
			The window.screen object can be written without the window prefix.

			Properties:

			screen.width
			screen.height
			screen.availWidth
			screen.availHeight
			screen.colorDepth
			screen.pixelDepth

			document.getElementById("demo").innerHTML = "Available Screen Width: " + screen.availWidth;
			document.getElementById("demo").innerHTML = "Available Screen Height: " + screen.availHeight;

			Window Screen Color Depth
			The screen.colorDepth property returns the number of bits used to display one color.

			All modern computers use 24 bit or 32 bit hardware for color resolution:
			24 bits =      16,777,216 different "True Colors"
			32 bits = 4,294,967,296 different "Deep Colors"
			Older computers used 16 bits: 65,536 different "High Colors" resolution.

			Very old computers, and old cell phones used 8 bits: 256 different "VGA colors".
			document.getElementById("demo").innerHTML = "Screen Color Depth: " + screen.colorDepth;

			Location
			Window Location
			The window.location object can be written without the window prefix.

			Some examples:

			window.location.href returns the href (URL) of the current page
			window.location.hostname returns the domain name of the web host
			window.location.pathname returns the path and filename of the current page
			window.location.protocol returns the web protocol used (http: or https:)
			window.location.assign loads a new document
			document.getElementById("demo").innerHTML = "Page hostname is " + window.location.hostname;
			document.getElementById("demo").innerHTML = "Page path is " + window.location.pathname;
			document.getElementById("demo").innerHTML = "Page protocol is " + window.location.protocol;
			document.getElementById("demo").innerHTML = "Port number is " + window.location.port;
			<input type="button" value="Load new document" onclick="newDoc()">

			<script>
			function newDoc() {
			  window.location.assign("https://www.w3schools.com")
			}
			</script>

			History
			The window.history object can be written without the window prefix.
			To protect the privacy of the users, there are limitations to how JavaScript can access this object.
			Some methods:
			history.back() - same as clicking back in the browser
			history.forward() - same as clicking forward in the browser
			function goBack() {
			  window.history.back()
			}

			<input type="button" value="Back" onclick="goBack()">

			Window Navigator
			The window.navigator object can be written without the window prefix.

			Some examples:

			navigator.appName
			navigator.appCodeName
			navigator.platform

			document.getElementById("demo").innerHTML = "cookiesEnabled is " + navigator.cookieEnabled;
			document.getElementById("demo").innerHTML = "navigator.appName is " + navigator.appName;
			document.getElementById("demo").innerHTML = "navigator.appCodeName is " + navigator.appCodeName;
			document.getElementById("demo").innerHTML = "navigator.product is " + navigator.product;
			document.getElementById("demo").innerHTML = navigator.appVersion;
			document.getElementById("demo").innerHTML = navigator.userAgent;

			Warning !!!
			The information from the navigator object can often be misleading, and should not be used to detect browser versions because:
			Different browsers can use the same name
			The navigator data can be changed by the browser owner
			Some browsers misidentify themselves to bypass site tests
			Browsers cannot report new operating systems, released later than the browser

			document.getElementById("demo").innerHTML = navigator.platform;
			document.getElementById("demo").innerHTML = navigator.language;
			document.getElementById("demo").innerHTML = navigator.onLine;
			document.getElementById("demo").innerHTML = navigator.javaEnabled();

			Popup
			Alert Box
			window.alert("sometext");
			alert("I am an alert box!");
			window.confirm("sometext");
			prompt("Please enter your name", "Harry Potter");
			
			<p>Line-breaks in a popup box.</p>
			<button onclick="alert('Hello\nHow are you?')">Try it</button>

			Timing
			Timing Events
			The window object allows execution of code at specified time intervals.

			These time intervals are called timing events.

			The two key methods to use with JavaScript are:

			setTimeout(function, milliseconds)
			Executes a function, after waiting a specified number of milliseconds.
			setInterval(function, milliseconds)
			Same as setTimeout(), but repeats the execution of the function continuously.
			The setTimeout() and setInterval() are both methods of the HTML DOM Window object.

			1.
			<button onclick="setTimeout(myFunction, 3000)">Try it</button>

			<script>
			function myFunction() {
			  alert('Hello');
			}
			</script>
			2.
			<button onclick="myVar = setTimeout(myFunction, 3000)">Try it</button>
			<button onclick="clearTimeout(myVar)">Stop it</button>
			3.
			var myVar = setInterval(myTimer, 1000);

			function myTimer() {
			  var d = new Date();
			  document.getElementById("demo").innerHTML = d.toLocaleTimeString();
			}

			Cookie
			What are Cookies?
			Cookies are data, stored in small text files, on your computer.

			When a web server has sent a web page to a browser, the connection is shut down, and the server forgets everything about the user.

			Cookies were invented to solve the problem "how to remember information about the user":

			When a user visits a web page, his name can be stored in a cookie.
			Next time the user visits the page, the cookie "remembers" his name.
			Set cookie
			document.cookie = "username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/";
			read cookie
			var x = document.cookie;
			delete 
			document.cookie = "username=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
	6.2. JavaScript Windows
			Window Object
			The window object represents an open window in a browser.
			Property	Description
			closed	Returns a Boolean value indicating whether a window has been closed or not
			console	Returns a reference to the Console object, which provides methods for logging information to the browser's console (See Console object)
			defaultStatus	Sets or returns the default text in the statusbar of a window
			document	Returns the Document object for the window (See Document object)
			frameElement	Returns the <iframe> element in which the current window is inserted
			frames	Returns all <iframe> elements in the current window
			history	Returns the History object for the window (See History object)
			innerHeight	Returns the height of the window's content area (viewport) including scrollbars
			innerWidth	Returns the width of a window's content area (viewport) including scrollbars
			length	Returns the number of <iframe> elements in the current window
			localStorage	Allows to save key/value pairs in a web browser. Stores the data with no expiration date
			location	Returns the Location object for the window (See Location object)
			name	Sets or returns the name of a window
			navigator	Returns the Navigator object for the window (See Navigator object)
			opener	Returns a reference to the window that created the window
			outerHeight	Returns the height of the browser window, including toolbars/scrollbars
			outerWidth	Returns the width of the browser window, including toolbars/scrollbars
			pageXOffset	Returns the pixels the current document has been scrolled (horizontally) from the upper left corner of the window
			pageYOffset	Returns the pixels the current document has been scrolled (vertically) from the upper left corner of the window
			parent	Returns the parent window of the current window
			screen	Returns the Screen object for the window (See Screen object)
			screenLeft	Returns the horizontal coordinate of the window relative to the screen
			screenTop	Returns the vertical coordinate of the window relative to the screen
			screenX	Returns the horizontal coordinate of the window relative to the screen
			screenY	Returns the vertical coordinate of the window relative to the screen
			sessionStorage	Allows to save key/value pairs in a web browser. Stores the data for one session
			scrollX	An alias of pageXOffset
			scrollY	An alias of pageYOffset
			self	Returns the current window
			status	Sets or returns the text in the statusbar of a window
			top	Returns the topmost browser window

			Window Object Methods
			Method	Description
			alert()	Displays an alert box with a message and an OK button
			atob()	Decodes a base-64 encoded string
			blur()	Removes focus from the current window
			btoa()	Encodes a string in base-64
			clearInterval()	Clears a timer set with setInterval()
			clearTimeout()	Clears a timer set with setTimeout()
			close()	Closes the current window
			confirm()	Displays a dialog box with a message and an OK and a Cancel button
			focus()	Sets focus to the current window
			getComputedStyle()	Gets the current computed CSS styles applied to an element
			getSelection()	Returns a Selection object representing the range of text selected by the user
			matchMedia()	Returns a MediaQueryList object representing the specified CSS media query string
			moveBy()	Moves a window relative to its current position
			moveTo()	Moves a window to the specified position
			open()	Opens a new browser window
			print()	Prints the content of the current window
			prompt()	Displays a dialog box that prompts the visitor for input
			requestAnimationFrame()	Requests the browser to call a function to update an animation before the next repaint
			resizeBy()	Resizes the window by the specified pixels
			resizeTo()	Resizes the window to the specified width and height
			scroll()	Deprecated. This method has been replaced by the scrollTo() method.
			scrollBy()	Scrolls the document by the specified number of pixels
			scrollTo()	Scrolls the document to the specified coordinates
			setInterval()	Calls a function or evaluates an expression at specified intervals (in milliseconds)
			setTimeout()	Calls a function or evaluates an expression after a specified number of milliseconds
			stop()	Stops the window from loading
	6.3. Pushing code quality via JSHint Tool
			JSHint is a community-driven tool that detects errors and potential problems in JavaScript code. Since JSHint is so flexible, you can easily adjust it in the environment you expect your code to execute. JSHint is open source and will always stay this way.

			https://github.com/jshint/jshint/
	6.4. Security in Java Script
			Cross Site Scripting (XSS) - Reflected, Stored and DOM based.
			SQL and NoSQL injections
			Authentication and password management issues
			Session management issues
			Access control issues
			Unsafe use of cryptography - Hashing, Encryption, Decryption and Random number generators
			Error Handling and Logging issues

			Here is a JavaScript Secure Coding Practices guide:

			GitHub - https://github.com/Checkmarx/JS-SCP
			GitBooks - https://checkmarx.gitbooks.io/js-scp/
