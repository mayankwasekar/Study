Node.js Actually is
	- A platform which allows us to run JavaScript on a computer / server
	- Read,delete and update files
	- Easily communicate with a database

Why is Node.js so Popular?
	- It uses JavaScript
	- Very fast (runs on the V8 engine & user non-blocking code)
	- Huge ecosystem of open source package (npm)
	- Great for real-time services (like chats)

File contains

The inner working of Node.js
	- V8 engine
	- Modules
	- Event emitter
	- The file system
Creating a web server
	- Routing
	- Express
	- Templating

- Make a Node.js application (todo app)

JavaScript Engines

	- Computers do not understand JavaScript
	- A JavaScript engine takes JavaScript and converts it into something it does understand - machine code

					JavaScript
						|
						|
					   C++
					    |
					    |
					Assembly Language
						|
						|
					Machine Code

	- Node.js is written in C++
	- At the heart of Node.js is the V8 engine
	- The V8 engine converts our JS into machine code

					Node.js with V8

					JavaScript
						|
						|
					C++--Node.js--V8
						|
						|
					Machine Code

The Global Objects
	- console.log('Hello World')
	- setTimeout(function (){
		    console.log('3 secondes have passed');
		}, 3000)
    - 	var time = 0;
		setInterval(function (){
		    time += 2;
		    console.log(time + '3 secondes have passed');
		}, 2000);

		var time = 0;
		var timer = setInterval(function (){
		    time += 2;
		    console.log(time + ' secondes have passed');
		    if(time > 5){
		        clearInterval(timer);
		    }
		}, 2000);

	Durr Name and File Name
	console.log(__dirname);
	console.log(__filename);

	require, exports

	Normal and function expression
1.	//normal function statement
	function sayHi() {
	    console.log('hi');
	}

	sayHi();

	//function expression

	var sayBye = function(){
	    console.log('bye');
	};

	sayBye();

	function callFunction(fun) {
	    fun()
	}


2.	function callFunction(fun) {
	    fun()
	}

	//function expression

	var sayBye = function(){
	    console.log('bye');
	};

	callFunction(sayBye);

Modules and Requires
1.	server.js
	var counter = require('./count');  //catch function as parameter from module.exports
	console.log(counter(['shaun', 'crystal', 'ryu']));

	counter.js
	var counter = function (arr) {
	  return 'There are ' + arr.length + ' elements in this array';
	};

	module.exports = counter;  //send the function outside module in variable

2.	
	server.js
	var stuff = require('./stuff');

	console.log(stuff.counter(['shaun', 'crystal', 'ryu']));

	console.log(stuff.adder(5,6));

	console.log(stuff.adder(stuff.pi, 5));

	stuff.js
	var counter = function (arr) {
	  return 'There are ' + arr.length + ' elements in this array';
	};

	var adder = function(a,b){
	  return `The sum of the 2 no is ${a+b}`;
	};

	var pi = 3.14;
	module.exports.counter = counter;
	module.exports.adder = adder;
	module.exports.pi = pi;

	another way
	stuff.js
	module.exports.counter = function (arr) {
	  return 'There are ' + arr.length + ' elements in this array';
	};

	module.exports.adder = function(a,b){
	  return `The sum of the 2 no is ${a+b}`;
	};

	module.exports.pi = 3.14;

	another way
	stuff.js
	var counter = function (arr) {
	  return 'There are ' + arr.length + ' elements in this array';
	};

	var adder = function(a,b){
	  return `The sum of the 2 no is ${a+b}`;
	};

	var pi = 3.14;

	module.exports = {
	  counter: counter,
	  adder: adder,
	  pi: pi
	};

The Node Event emitter
	var events = require('events');

	var myEmitter = new events.EventEmitter();

	myEmitter.on('someEvent', function (msg) {
	    console.log(msg);
	});

	myEmitter.emit('someEvent', 'the event was emitted');

	power of event emitter
	var events = require('events');

	var util = require('util');


	var Person = function (name) {
	    this.name = name;
	};

	util.inherits(Person, events.EventEmitter);

	var james = new Person('james');
	var mary = new Person('mary');
	var ryu = new Person('ryu');

	var people = [james, mary, ryu];

	people.forEach(function (person) {
	   person.on('speak', function (msg) {
	      console.log(person.name + ' said: ' + msg);
	   });
	});


	james.emit('speak', 'hey dudes');
	ryu.emit('speak', 'I want a curry');

Reading and Writing files
	var fs = require('fs');

	/*var readMe = fs.readFileSync('readMe.txt', 'utf8');*/
	/*console.log(readMe);*/
	/*fs.writeFileSync('writeMe.txt', readMe)*/

	/*fs.readFile('readMe.txt', 'utf8', function (err, data) {
	   console.log(data);
	});
	console.log('test');
	o/p: test
	hello I am in MET*/
	fs.readFile('readMe.txt', 'utf8', function (err, data) {
	   fs.writeFile('writeMe.txt', data, ((err, data)=>data?err:true));
	});

Deleting a file
	var fs = require('fs');

	fs.unlink('writeme.txt', err => {if(err)console.log(err)});
Add directory
	var fs = require('fs');
	fs.mkdirSync('stuff');
Remove directory
	var fs = require('fs');
	fs.rmdirSync('stuff');
		assync method
		var fs = require('fs');

		fs.unlink('./stuff/writeMe.txt', err => {if(err)console.log(err)}, function () {
		    fs.rmdir('stuff');
		});

Creating server
var http = require('http');

var server = http.createServer(function (req, res) {
    res.writeHead(200, {'Content-Type': 'text/plain'});
    res.end('Hello Met');
});


server.listen(3000, '127.0.0.1');
console.log('listining port to 3000');

Buffers and Streams
	Buffers
	-Temporaty storage spot for a chunk of data that is being transfered form one place to another
	-The buffer is filled with data, then passed along
	-Transfer small chunks of data at a time

	Streams
	-Can create streams in Node.js to transfer data
	-Increase performance

Readable Streams
	-Writable streams - allow node js to write data to a stream
	-Readable Streams - allow node js to read data from a stream
	-Duplex - can read and write to a stream

Readable stream
	var http = require('http');
	var fs = require('fs');

	var myReadStream = fs.createReadStream(__dirname + '/readMe.txt', 'utf8');

	myReadStream.on('data', function (chunk) {
	   console.log('new chunk received:');
	   console.log(chunk);
	});
Writable stream
	var http = require('http');
	var fs = require('fs');

	var myReadStream = fs.createReadStream(__dirname + '/readMe.txt', 'utf8');
	var myWriteStream = fs.createWriteStream(__dirname + '/writeMe.txt');

	myReadStream.on('data', function (chunk) {
	   console.log('new chunk received:');
	    myWriteStream.write(chunk);
	});

Pipes
	var http = require('http');
	var fs = require('fs');

	var myReadStream = fs.createReadStream(__dirname + '/readMe.txt', 'utf8');
	var myWriteStream = fs.createWriteStream(__dirname + '/writeMe.txt');

	myReadStream.pipe(myWriteStream);
	Above code do all jobs of Writable stream in a single line code.

	Sending data through Pipes
	var http = require('http');
	var fs = require('fs');

	var server = http.createServer(function (req, res) {
	    console.log('request was made' + req.url);
	    res.writeHead(200, {'Content-Type': 'text/plain'});

	    var myReadStream = fs.createReadStream(__dirname + '/readMe.txt', 'utf8');
	    myReadStream.pipe(res);
	});

	server.listen(3000, '127.0.0.1');
	console.log('listining port to 3000');

Serving HTML file 
create html file index.html

server.js
	var http = require('http');
var fs = require('fs');



var server = http.createServer(function (req, res) {
    console.log('request was made' + req.url);
    res.writeHead(200, {'Content-Type': 'text/html'});

    var myReadStream = fs.createReadStream(__dirname + '/index.html', 'utf8');
    myReadStream.pipe(res);
});

server.listen(3000, '127.0.0.1');
console.log('listining port to 3000');

Serving JSON data
var http = require('http');
var fs = require('fs');

var server = http.createServer(function (req, res) {
    console.log('request was made' + req.url);
    res.writeHead(200, {'Content-Type': 'application/json'});

    var myObj = {
        name: 'Ryu',
        job: 'Ninja',
        age: 29
    }
    res.end(JSON.stringify(myObj));
});

server.listen(3000, '127.0.0.1');
console.log('listining port to 3000');

Routing
var http = require('http');
var fs = require('fs');

var server = http.createServer(function (req, res) {
    console.log('request was made' + req.url);
    if(req.url === '/home' || req.url === '/'){
        res.writeHead(200, {'Content-Type': 'text/html'});
        fs.createReadStream(__dirname + '/index.html').pipe(res);
    } else if(req.url === '/contact'){
        res.writeHead(200, {'Content-Type': 'text/html'});
        fs.createReadStream(__dirname + '/contact.html').pipe(res);
    } else if(req.url === '/api/ninjas'){
        var ninjas = [{name: 'ryu', age:29},{name: 'yoshi', age: 32}];
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.end(JSON.stringify(ninjas));
    } else {
        res.writeHead(404, {'Content-Type': 'text/html'});
        fs.createReadStream(__dirname + '/404.html').pipe(res);
    }
});

server.listen(3000, '127.0.0.1');
console.log('listining port to 3000');

package.json
>npm init  //create package.json which use to track packages(dependencies) insatlled in project
>npm install express
>npm uninstall express
>npm install express -save		//after uninstalling it show dependencies still in package.json
>npm install 	//it install all dependencies from package.json

installing Nodemon
>npm install -g nodemon //monitor changes and automatically compile,restart server and refresh page
>nodemon server.js

Express
- Easy and flexible routing system
- Integrates with many templating Engines
- Contains a middleware framework

HTTP Methods
- GET
- POST
- DELETE
- PUT
Responding to requests
- GET - app.get('route',fn)
- POST - app.post('route',fn)
- DELETE - app.delete('route',fn)
	
	var express = require('express');

	var app = express();

	app.get('/', function (req, res) {
	   res.send('this is home page')
	});
	app.get('/contact', function (req, res) {
	    res.send('this is contact page')
	});

	app.listen(3000);

Route Parameters
	var express = require('express');

	var app = express();

	app.get('/', function (req, res) {
	   res.send('this is home page')
	});
	app.get('/contact', function (req, res) {
	    res.send('this is contact page')
	});

	app.get('/profile/:name', function(req, res) {
	    res.send('You requested to see a profile with the id of ' + req.params.name);
	});

	app.listen(3000);

Template Engines
>npm install ejs -save //-save for save dependencies
server.js
	var express = require('express');

	var app = express();

	app.set('view engine', 'ejs');

	app.get('/', function (req, res) {
	   res.sendFile(__dirname + '/index.html');
	});
	app.get('/contact', function (req, res) {
	    res.sendFile(__dirname + '/contact.html');
	});

	app.get('/profile/:name', function(req, res) {
	    var data = {age: 29, job: 'ninja', hobbies: ['eating', 'fighting', 'fishing']};
	    res.render('profile', {person: req.params.name, data: data});
	});

	app.listen(3000);

views/profile.ejb
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <style>
        body{
            background: skyblue;
            font-family: Verdana;
            color: #fff;
            padding: 30px;
        }
        h1{font-size: 48px; text-transform: uppercase; letter-spacing: 2px; text-align: center;}
        h2{font-size: 30px; text-transform: uppercase; letter-spacing: 2px; text-align: center;}
        p{font-size: 16px; text-align: center;}
    </style>
</head>
<body>
<h1>Welcome here <%= person %></h1>
<p><strong>Age: </strong><%= data.age %></p>
<p><strong>Job: </strong><%= data.job %></p>
<h2>Hobbies</h2>
<ul>
    <% data.hobbies.forEach(function (value) { %>
       <li><%= value %></li>
    <% })%>
</ul>
</body>
</html>

partial views


























































































