4. 5. 6. PHP
	4.1.  Introduction to PHP
		  * The term PHP is an acronym for PHP: Hypertext Preprocessor. PHP is a server-side scripting language designed specifically for web development.
		  * PHP is a Loosely Typed Language

		  * PHP automatically converts the variable to the correct data type, depending on its value.
		  
	4.2.  Basic rule of PHP
		  * PHP owns the top-level namespace but tries to find decent descriptive names and avoid any obvious clashes.

		  * Function names use underscores between words, while class names use both the camelCase and PascalCase rules.

          * PHP will prefix any global symbols of an extension with the name of the extension. (In the past, there have been numerous exceptions to this rule.)
          * Iterators and Exceptions are however simply postfixed with "Iterator" and "Exception."
          * PHP reserves all symbols starting with __ as magical. It is recommended that you do not create symbols starting with __ in PHP unless you want to use documented magical functionality.

	4.3.  PHP in action
		<!DOCTYPE html>
		<html>
		<body>
			<?php
			echo "My first PHP script!";
			?>
		</body>
		</html>
	4.4.  Working with text, variable and numbers
			$txt = "Hello world!";
			$x = 5;
			$y = 10.5;
		    * Variable names are case-sensitive ($age and $AGE are two different variables)
		    PHP has three different variable scopes:
			local
			global
			static
	4.5.  Making decisions and repeating yourself
	4.6.  Arrays
		4.6.1. Working with Arrays
				In PHP, there are three types of arrays:

				i. Indexed arrays - Arrays with a numeric index
				      $cars = array("Volvo", "BMW", "Toyota");
				ii. Associative arrays - Arrays with named keys
					  $age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");
					  foreach($age as $x => $x_value) {
  						  echo "Key=" . $x . ", Value=" . $x_value;
  						  echo "<br>";
						}
				iii. Multidimensional arrays - Arrays containing one or more arrays
					  $cars = array
					  (
					  array("Volvo",22,18),
					  array("BMW",15,13),
					  array("Saab",5,2),
					  array("Land Rover",17,15)
					  );
					  <?php
							for ($row = 0; $row < 4; $row++) {
							  echo "<p><b>Row number $row</b></p>";
							  echo "<ul>";
							  for ($col = 0; $col < 3; $col++) {
							    echo "<li>".$cars[$row][$col]."</li>";
							  }
							  echo "</ul>";
							}
					  ?>
		4.6.2. Looping through array (see above ex.)
		4.6.3. Sorting arrays
				sort() - sort arrays in ascending order
				rsort() - sort arrays in descending order
				asort() - sort associative arrays in ascending order, according to the value
				ksort() - sort associative arrays in ascending order, according to the key
				arsort() - sort associative arrays in descending order, according to the value
				krsort() - sort associative arrays in descending order, according to the key
				eg. $cars = array("Volvo", "BMW", "Toyota");
					sort($cars);
	4.7.  Fuctions
			function sum($x, $y) {
 				  $z = $x + $y;
  				  return $z;
			}

			echo "5 + 10 = " . sum(5, 10) . "<br>";
	5.1. Making web forms
		* The PHP superglobals $_GET and $_POST are used to collect form-data.
		
		<form action="welcome.php" method="post">
		Name: <input type="text" name="name"><br>
		E-mail: <input type="text" name="email"><br>
		<input type="submit">
		</form>

		Welcome <?php echo $_POST["name"]; ?><br>
		Your email address is: <?php echo $_POST["email"]; ?>

		5.1.1. Form processing with functions

		<?php
			// Initialize variables to null.
			$nameError ="";
			$emailError ="";
			$genderError ="";
			$websiteError ="";

			// On submitting form below function will execute.

			if(isset($_POST['submit'])){
				if (empty($_POST["name"])) {
								$nameError = "Name is required";
					} else {
								$name = test_input($_POST["name"]);
							// check name only contains letters and whitespace
							if (!preg_match("/^[a-zA-Z ]*$/",$name)) {
								$nameError = "Only letters and white space allowed";
							}
					}
				if (empty($_POST["email"])) {
								$emailError = "Email is required";
					} else {
								$email = test_input($_POST["email"]);
							// check if e-mail address syntax is valid or not
							if (!preg_match("/([w-]+@[w-]+.[w-]+)/",$email)) {
								$emailError = "Invalid email format";
					}
			}
			if (empty($_POST["website"])) {
					$website = "";
			} else {
					$website = test_input($_POST["website"]);
					// check address syntax is valid or not(this regular expression also allows dashes in the URL)
					if (!preg_match("/b(?:(?:https?|ftp)://|www.)[-a-z0-9+&@#/%?=~_|!:,.;]*[-a-z0-9+&@#/%=~_|]/i",$website)) {
					$websiteError = "Invalid URL";
					}
			}
			if (empty($_POST["comment"])) {
					$comment = "";
			} else {
					$comment = test_input($_POST["comment"]);
			}
			if (empty($_POST["gender"])) {
					$genderError = "Gender is required";
			} else {
					$gender = test_input($_POST["gender"]);
					}
			}
			function test_input($data) {
			$data = trim($data);
			$data = stripslashes($data);
			$data = htmlspecialchars($data);
			return $data;
			}
			//php code ends here
			?>
      <form method = "post" action = "<?php 
         echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
         <table>
            <tr>
               <td>Name:</td>
               <td><input type = "text" name = "name">
                  <span class = "error">* <?php echo $nameErr;?></span> <
               </td>
            </tr>

        htmlspecialchars() - The htmlspecialchars function in PHP is used to convert 5 characters into corresponding HTML entities where applicable. It is used to encode user input on a website so that users cannot insert harmful HTML codes into a site.
            
		5.1.2. Validating data(see above ex.)
		5.1.3. Display default value 
				<td><input type = "text" name = "name">
                  <span class = "error">* <?php echo $nameErr;?></span> <
               </td>
	5.2. Working with cookies and sessions
		Why and when to use Cookies?
		Http is a stateless protocol; cookies allow us to track the state of the application using small files stored on the user’s computer.

		The path were the cookies are stored depends on the browser.

		Internet Explorer usually stores them in Temporal Internet Files folder.

		Personalizing the user experience – this is achieved by allowing users to select their preferences.

		The page requested that follow are personalized based on the set preferences in the cookies.

		Tracking the pages visited by a user

		setcookie(name, value, expire, path, domain, secure, httponly);
		The setcookie() function must appear BEFORE the <html> tag.
		<?php
		if(count($_COOKIE) > 0) {
		    echo "Cookies are enabled.";
		} else {
		    echo "Cookies are disabled.";
		}
		?>

		What is a Session?
			A session is a global variable stored on the server.
			Each session is assigned a unique id which is used to retrieve stored values.
			Whenever a session is created, a cookie containing the unique session id is stored on the user’s computer and returned with every request to the server.  If the client browser does not support cookies, the unique php session id is displayed in the URL
			Sessions have the capacity to store relatively large data compared to cookies.
			The session values are automatically deleted when the browser is closed. If you want to store the values permanently, then you should store them in the database.
			Just like the $_COOKIE array variable, session variables are stored in the $_SESSION array variable. Just like cookies, the session must be started before any HTML tags.
			You want to store important information such as the user id more securely on the server where malicious users cannot temper with them.
			You want to pass values from one page to another.
			You want the alternative to cookies on browsers that do not support cookies.
			You want to store global variables in an efficient and more secure way compared to passing them in the URL
			You are developing an application such as a shopping cart that has to temporary store information with a capacity larger than 4KB.
		Why and when to use Sessions?
			You want to store important information such as the user id more securely on the server where malicious users cannot temper with them.
			You want to pass values from one page to another.
			You want the alternative to cookies on browsers that do not support cookies.
			You want to store global variables in an efficient and more secure way compared to passing them in the URL
			You are developing an application such as a shopping cart that has to temporary store information with a capacity larger than 4KB.

			// remove all session variables
			session_unset(); 

			// destroy the session 
			session_destroy(); 


		5.2.1. Login and User Identification
			To Start a PHP Session:
			<?php
			session_start();
			// Do Something
			?>

			To Store values in PHP Session variable:
			<?php
			session_start();
			// Store Session Data
			$_SESSION['login_user']= $username;  // Initializing Session with value of PHP Variable?>

			To Unset or Destroy a PHP Session:
			<?php
			session_destroy(); // Is Used To Destroy All Sessions
			//Or
			if(isset($_SESSION['id']))
			unset($_SESSION['id']);  //Is Used To Destroy Specified Session?>

		5.2.2. Parsing, display date and times
		Day	---	---
			d and j	Day of the month, 2 digits with or without leading zeros	01 to 31 or 1 to 31
			D and l	A textual representation of a day	Mon through Sun or Sunday through Saturday
			S	English ordinal suffix for the day of the month, 2 characters. It's ignored while processing.	st, nd, rd or th.
			z	The day of the year (starting from 0)	0 through 365
		Month	---	---
			F and M	A textual representation of a month, such as January or Sept	January through December or Jan through Dec
			m and n	Numeric representation of a month, with or without leading zeros	01 through 12 or 1 through 12
		Year	---	---
			Y	A full numeric representation of a year, 4 digits	Examples: 1999 or 2003
			y	A two digit representation of a year	Examples: 99 or 03
		Time	---	---
			a and A	Ante meridiem and Post meridiem	am or pm
			g and h	12-hour format of an hour with or without leading zero	1 through 12 or 01 through 12
			G and H	24-hour format of an hour with or without leading zeros	0 through 23 or 00 through 23
			i	Minutes with leading zeros	00 to 59
			s	Seconds, with leading zeros	00 through 59
			u	Microseconds (up to six digits)	Example: 45, 654321
		Timezone	---	---
			e, O, P and T	Timezone identifier, or difference to UTC in hours, or difference to UTC with colon between hours and minutes, or timezone abbreviation	Examples: UTC, GMT, Atlantic/Azores or +0200 or +02:00 or EST, MDT

	6.1. Storing Information with Databases
		PHP 5 and later can work with a MySQL database using:

		MySQLi extension (the "i" stands for improved)
		PDO (PHP Data Objects)
		<?php
			$servername = "localhost";
			$username = "username";
			$password = "password";

			// Create connection
			$conn = mysqli_connect($servername, $username, $password);

			// Check connection
			if (!$conn) {
			    die("Connection failed: " . mysqli_connect_error());
			}
			echo "Connected successfully";
		?>
		6.1.1. Connection to database
		6.1.2. Create a table
		6.1.3. Inserting and retriving data from database
		6.1.4. Inserting and retriving data safely
			$name = mysqli_real_escape_string($conn, $_POST['name']);
			$amount = mysqli_real_escape_string($conn, $_POST['amount']);
			$times = mysqli_real_escape_string($conn, $_POST['times']);

			if (strlen($times) > 200000) {  $times = "";    }

			$sql = "INSERT INTO usertimes (name,date,amount,times)
			VALUES ('$name', CURDATE(), '$amount', '$times') ON DUPLICATE KEY UPDATE    
			date=CURDATE(), amount='$amount', times='$times'";

			if ($conn->query($sql) === TRUE) {
			    echo "Page saved!";
			} else {
			    echo "Error: " . $sql . "<br>" . $conn->error;
			}
			$conn->close();
		6.1.5. MySQLI with out PEAR DB
		PEAR (PHP Extension and Application Repository) is a framework and distribution system for reusable PHP classes, libraries and modules. One of its most popular packages is PEAR DB, the database abstraction layer created by this project. DB provides portability features that enable programs written for one database to work with other databases.
		<?php
			require_once 'DB.php';

			$dsn = array(
			    'phptype'  => 'mysqli',
			    'username' => 'someuser',
			    'password' => 'apasswd',
			    'hostspec' => 'localhost',
			    'database' => 'thedb',
			    'key'      => 'client-key.pem',
			    'cert'     => 'client-cert.pem',
			    'ca'       => 'cacert.pem',
			    'capath'   => '/path/to/ca/dir',
			    'cipher'   => 'AES',
			);

			$options = array(
			    'ssl' => true,
			);

			$db =& DB::connect($dsn, $options);
			if (PEAR::isError($db)) {
			    die($db->getMessage());
			}
		?>
		<?php
			$statement['db1']['INSERT_PERSON'] = 'INSERT INTO person
			    (surname, name, age) VALUES (?, ?, ?)';

			$statement['db2']['INSERT_PERSON'] = 'INSERT INTO person
			    SET surname=?, name=?, age=?';
		?>
		<?php
			// Once you have a valid DB object named $db...
			$sth = $db->prepare('INSERT INTO numbers VALUES (?, ?, ?)');

			$data = array(1, 'one', 'en');
			$db->execute($sth, $data);
		?>
	6.2. XML
		XML stands for eXtensible Markup Language.
		XML was designed to store and transport data.
		XML was designed to be both human- and machine-readable.

		6.2.1. Generating and parsing an XML Document
				<?xml version="1.0" encoding="UTF-8"?>
				<note>
				  <to>Tove</to>
				  <from>Jani</from>
				  <heading>Reminder</heading>
				  <body>Don't forget me this weekend!</body>
				</note>

				<?php
					$xml = new SimpleXMLElement('<xml/>');

					for ($i = 1; $i <= 8; ++$i) {
					    $track = $xml->addChild('track');
					    $track->addChild('path', "song$i.mp3");
					    $track->addChild('title', "Track $i - Track Title");
					}

					Header('Content-type: text/xml');
					print($xml->asXML());
		6.2.2. Advanced XML processing
				SimpleXML is a tree-based parser.

				SimpleXML provides an easy way of getting an element's name, attributes and textual content if you know the XML document's structure or layout.

				SimpleXML turns an XML document into a data structure you can iterate through like a collection of arrays and objects.

				Compared to DOM or the Expat parser, SimpleXML takes a fewer lines of code to read text data from an element

				<?php
					$myXMLData =
					"<?xml version='1.0' encoding='UTF-8'?>
					<note>
					<to>Tove</to>
					<from>Jani</from>
					<heading>Reminder</heading>
					<body>Don't forget me this weekend!</body>
					</note>";

					$xml=simplexml_load_string($myXMLData) or die("Error: Cannot create object");
					print_r($xml);
				?>
				The output of the code above will be:

				SimpleXMLElement Object ( [to] => Tove [from] => Jani [heading] => Reminder [body] => Don't forget me this weekend! )

	6.3. Debugging
		error_reporting = E_ALL
		display_errors = 1
		Setting Break Points 1. empty 2. die
			if (!empty($days)) {
				die('Point 1: $days is not empty');
				// More code may go here
			}
		Debugging Functions
		<?php

			$day = 'Monday';

			var_dump($day);
			echo '<br /><br />';
			print_r($day);

		?>
		6.3.1. Fixing parsing error and database error
				* Parsing means syntactical error. found while parsing before compiling
				$con=mysqli_connect("localhost","my_user","my_password","my_db");
				// Check connection
				if (mysqli_connect_errno())
				  {
				  echo "Failed to connect to MySQL: " . mysqli_connect_error();
				  }

				// Perform a query, check for error
				if (!mysqli_query($con,"INSERT INTO Persons (FirstName) VALUES ('Glenn')"))
				  {
				  echo("Error description: " . mysqli_error($con));
				  }

				mysqli_close($con);

	7.1. Working with files
		* File handling is an important part of any web application. You often need to open and process a file for different tasks.
		* You can do a lot of damage if you do something wrong. Common errors are: editing the wrong file, filling a hard-drive with garbage data, and deleting the content of a file by accident.

		AJAX = Asynchronous JavaScript and XML
		CSS = Cascading Style Sheets
		HTML = Hyper Text Markup Language
		PHP = PHP Hypertext Preprocessor
		SQL = Structured Query Language
		SVG = Scalable Vector Graphics
		XML = EXtensible Markup Language

		7.1.1. File permission
			PHP checking file permissions
			PHP gives you three handy functions that allow you to check file permissions:

			is_readable() returns true if you are allowed to read the file, otherwise returns false.
			is_writable() returns true if you are allowed to write the file, otherwise returns false.
			is_executable() returns true if you are allowed to execute the file, otherwise returns false.
			
			eg. $msg = is_readable($fn) ? $msg = 'File is readable': $msg = 'File is not readable';
			PHP also provides the fileperms() function that returns an integer, which represents the permissions that are set on a particular file.
			<?php 
				$fn = './test.txt';
				$fp = fileperms($fn);
				 
				echo substr(sprintf('%o', $fp), -4); //0666
		7.1.2. Reading and writing files
			The chmod() function returns true if the permission was set successfully otherwise it returns false.

			A file permission is represented by an octal number that contains three digits:

		   	The first digit specifies what the owner of the file can do with file.
			The second digit specifies what the owner group of the file can do with the file.
			The third digit specifies what everyone can do with the file.
			The following table illustrates the value of each digit that represents the access permission for particular users ( user, user group or everyone) :

			Value	Permission
			0	cannot read, write or execute
			1	can only execute
			2	can only write
			3	can write and execute
			4	can only read
			5	can read and execute
			6	can read and write
			7	can read, write and execute
			<?php 
				$fn = './test.txt';
				chmod($fn, 0644);
			NOTE : Notice that we put 0 before 644 to ask PHP to interpret it as an octal number.

		7.1.3. Working with CSV file
			The fgetcsv() function parses a line from an open file, checking for CSV fields.
			The fgetcsv() function stops returning on a new line, at the specified length, or at EOF, whichever comes first.
			This function returns the CSV fields in an array on success, or FALSE on failure and EOF.
			fgetcsv(file,length,separator,enclosure)

			file	Required. Specifies the file to check
			length	Optional. Specifies the maximum length of a line. Must be greater than the longest line (in characters) in the CSV file. Omitting this parameter (or setting it to 0) the line length is not limited, which is slightly slower.
			Note: This parameter is required in versions prior to PHP 5

			separator	Optional. A character that specifies the field separator. Default is comma ( , )
			enclosure	Optional. A character that specifies the field enclosure character. Default is "

			<?php
				$file = fopen("contacts.csv","r");

				while(! feof($file))
				  {
				  print_r(fgetcsv($file));
				  }

				fclose($file);
			?>
		7.2.4. Checking for errors
			Common errors with CSV imports
				Errant Commas:
				Double commas and commas in unusual places (e.g. before an entry) may cause the CSV import to reject.
				Unusual characters:
				Anything that is not an alphanumeric character in the SKU or handle field may cause the CSV file to be rejected; these can include:
				Apostrophe ( ' )
				Grave accent ( ` )
				Parentheses ( )
				Square brackets []
				Hyphen (-)
				Period (.)
				Comma (,)
				Colon (:)
				Ampersands (&)
				Quote Marks (")
				Asterisks (*)
			Duplicate SKUs:
				Microsoft Excel has an unfortunate habit of 'truncating' long numbers in Excel. Turning 8 or 9 digit numbers into numeric references like 8.765+E

	7.2. Command line PHP
		The main focus of CLI SAPI is for developing shell applications with PHP. There are quite a few differences between the CLI SAPI and other SAPIs which are explained in this chapter. It is worth mentioning that CLI and CGI are different SAPIs although they do share many of the same behaviors.
		Computer-Generated Imagery (movie industry) CGI. 
		<?php print "Hello World!"; ?>
		>php index.php
		>php -v

		How to accept user input in a PHP CLI script:
		php://stdin (read) php://stdout (write) php://stderr (write)
		To be able to read input from the script’s user, you can use STDIN combined with fgets(), fread(), fscanf() or fgetc(). For example:

		<?php fwrite(STDOUT, "Please enter your namen");
		<?php
		  echo "Are you sure you want to do this?  Type 'yes' to continue: ";

		  $handle = fopen ("php://stdin","r");
		  $line = fgets($handle);

		  if(trim($line) != 'yes'){
		     echo "ABORTING!\n";
		     exit;
		  }

		  echo "\n";
		  echo "Thank you, continuing...\n";
		?>
	7.3. Running Shell command
		>php index.php
		>php -v
	7.4. IMAP, POP3 and NNTP
		POP3
		As shown in the figure above, the Post Office Protocol or POP is used to retrieve email messages from a mail server to a mail client. The latest version, which is what's widely used, is version 3 - hence the term "POP3". 

		POP version 3, which is specified in RFC 1939, supports extensions and several authentication mechanisms. Authentication features are necessary to prevent malicious individuals from gaining unauthorized access to users' messages. 

		Generally speaking, a POP3 client retrieves email in the following manner:

		Connects to the mail server on port 110 (or 995 for SSL/TLS connections);
		Retrieves email messages; 
		Deletes copies of the messages stored on the server; and
		Disconnects from the server
		Although POP clients may be configured to allow the server to continue storing copies of the downloaded messages, the steps outlined above is the usual practice. Leaving them on the server is a practice that's usually done via IMAP. Let's talk about it now.


		IMAP
		IMAP, especially the current version (IMAP4), is a more sophisticated protocol. It allows users to group related messages and place them in folders, which can in turn be arranged hierarchically. It's also equipped with message flags that indicate whether a message has been read, deleted, or replied to. It even allows users to carry out searches against the server mailboxes.

		Here's how IMAP works in a nutshell:

		Connects to the mail server on port 143 (or 993 for SSL/TLS connections);
		Retrieves email messages; 
		Stays connected until the mail client app is closed and downloads messages on demand.
		Notice that messages aren't deleted on the server. This has major implications, which we'll talk about shortly.

		IMAP specifications can be found in RFC 3501.

		NNTP (Network News Transfer Protocol) is the predominant protocol used by computer clients and servers for managing the notes posted on Usenet newsgroups. NNTP replaced the original Usenet protocol, UNIX-to-UNIX Copy Protocol (UUCP) some time ago. NNTP servers manage the global network of collected Usenet newsgroups and include the server at your Internet access provider. An NNTP client is included as part of a Netscape, Internet Explorer, Opera, or other Web browser or you may use a separate client program called a newsreader.
		The well-known TCP port 119 is reserved for NNTP

	7.5. Graphics, PDF
		Use of GD graphics library provides PHP programming with another major advantage. Graphs, Charts, Bar diagrams, line diagrams can be easily created with dynamic properties using this. Creating graphical data charts is easy using this language.
		<?php
			header ("Content-type: image/png");
			$handle = ImageCreate (130, 50) or die ("Cannot Create image");
			$bg_color = ImageColorAllocate ($handle, 255, 0, 0);
			$txt_color = ImageColorAllocate ($handle, 255, 255, 255);
			$line_color = ImageColorAllocate ($handle, 0, 0, 0);
			for($i=0;$i<=130;$i=$i+10)
			{
			imageellipse ($handle, $i, 25, 40, 40, $line_color);
			}
			ImageString ($handle, 5, 5, 18, "BABU MUSHAI", $txt_color);
			ImagePng ($handle);
		?> 

		PDF
		http://www.fpdf.org/en/tutorial/index.php
		http://pecl.php.net/package/pdflib
		The PDF functions in PHP can create PDF files using the PDFlib library from PDFlib GmbH (» www.pdflib.com). A restricted version called PDFlib Lite 7 is available for free, but it is no longer maintained since 2010. PDFlib integration for PHP is still actively maintained by PDFlib GmbH. It is mainly targeted at the commercial PDFlib versions, but can also be used for the old PDFlib Lite.

		If you want to use PDFlib we urge you start with the examples which are included in all PDFlib packages, and refer to the extensive manuals in PDF format which are also included. At a minimum you should take a look at the hello.php sample to learn basic setup for PDFlib usage.
		<?php
			$p = PDF_new();

			/*  open new PDF file; insert a file name to create the PDF on disk */
			if (PDF_begin_document($p, "", "") == 0) {
			    die("Error: " . PDF_get_errmsg($p));
			}

			PDF_set_info($p, "Creator", "hello.php");
			PDF_set_info($p, "Author", "Rainer Schaaf");
			PDF_set_info($p, "Title", "Hello world (PHP)!");

			PDF_begin_page_ext($p, 595, 842, "");

			$font = PDF_load_font($p, "Helvetica-Bold", "winansi", "");

			PDF_setfont($p, $font, 24.0);
			PDF_set_text_pos($p, 50, 700);
			PDF_show($p, "Hello world!");
			PDF_continue_text($p, "(says PHP)");
			PDF_end_page_ext($p, "");

			PDF_end_document($p, "");

			$buf = PDF_get_buffer($p);
			$len = strlen($buf);

			header("Content-type: application/pdf");
			header("Content-Length: $len");
			header("Content-Disposition: inline; filename=hello.pdf");
			print $buf;

			PDF_delete($p);
		?>
	7.6. Sending and receiving mails
		SEND
		<?php
         $to = "xyz@somedomain.com";
         $subject = "This is subject";
         
         $message = "<b>This is HTML message.</b>";
         $message .= "<h1>This is headline.</h1>";
         
         $header = "From:abc@somedomain.com \r\n";
         $header .= "Cc:afgh@somedomain.com \r\n";
         $header .= "MIME-Version: 1.0\r\n";
         $header .= "Content-type: text/html\r\n";
         
         $retval = mail ($to,$subject,$message,$header);
         
         if( $retval == true ) {
            echo "Message sent successfully...";
         }else {
            echo "Message could not be sent...";
         }
         RECEIVE
         <?php
			//The location of the mailbox.
			$mailbox = '{localhost:143/notls}';
			//The username / email address that we want to login to.
			$username = 'you@emailaddress.com';
			//The password for this email address.
			$password = 'mypassword';

			//Attempt to connect using the imap_open function.
			$imapResource = imap_open($mailbox, $username, $password);

			//If the imap_open function returns a boolean FALSE value,
			//then we failed to connect.
			if($imapResource === false){
			    //If it failed, throw an exception that contains
			    //the last imap error.
			    throw new Exception(imap_last_error());
			}

			//If we get to this point, it means that we have successfully
			//connected to our mailbox via IMAP.

			//Lets get all emails that were received since a given date.
			$search = 'SINCE "' . date("j F Y", strtotime("-7 days")) . '"';
			$emails = imap_search($imapResource, $search);

			//If the $emails variable is not a boolean FALSE value or
			//an empty array.
			if(!empty($emails)){
			    //Loop through the emails.
			    foreach($emails as $email){
			        //Fetch an overview of the email.
			        $overview = imap_fetch_overview($imapResource, $email);
			        $overview = $overview[0];
			        //Print out the subject of the email.
			        echo '<b>' . htmlentities($overview->subject) . '</b><br>';
			        //Print out the sender's email address / from email address.
			        echo 'From: ' . $overview->from . '<br><br>';
			        //Get the body of the email.
			        $message = imap_fetchbody($imapResource, $email, 1, FT_PEEK);
			    }
			}
      	?>